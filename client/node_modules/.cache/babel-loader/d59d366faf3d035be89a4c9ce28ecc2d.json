{"ast":null,"code":"import { StereoEffect } from \"./StereoEffect\";\nimport { optionsFromArguments } from \"../core/util/Defaults\";\nimport { Scale } from \"../signal/Scale\";\nimport { Signal } from \"../signal/Signal\";\nimport { FeedbackCombFilter } from \"../component/filter/FeedbackCombFilter\";\nimport { readOnly } from \"../core/util/Interface\";\n/**\n * an array of the comb filter delay time values\n */\n\nconst combFilterDelayTimes = [1687 / 25000, 1601 / 25000, 2053 / 25000, 2251 / 25000];\n/**\n * the resonances of each of the comb filters\n */\n\nconst combFilterResonances = [0.773, 0.802, 0.753, 0.733];\n/**\n * the allpass filter frequencies\n */\n\nconst allpassFilterFreqs = [347, 113, 37];\n/**\n * JCReverb is a simple [Schroeder Reverberator](https://ccrma.stanford.edu/~jos/pasp/Schroeder_Reverberators.html)\n * tuned by John Chowning in 1970.\n * It is made up of three allpass filters and four [[FeedbackCombFilter]].\n * JCReverb is now implemented with an AudioWorkletNode which may result on performance degradation on some platforms. Consider using [[Reverb]].\n * @example\n * const reverb = new Tone.JCReverb(0.4).toDestination();\n * const delay = new Tone.FeedbackDelay(0.5);\n * // connecting the synth to reverb through delay\n * const synth = new Tone.DuoSynth().chain(delay, reverb);\n * synth.triggerAttackRelease(\"A4\", \"8n\");\n *\n * @category Effect\n */\n\nexport class JCReverb extends StereoEffect {\n  constructor() {\n    super(optionsFromArguments(JCReverb.getDefaults(), arguments, [\"roomSize\"]));\n    this.name = \"JCReverb\";\n    /**\n     * a series of allpass filters\n     */\n\n    this._allpassFilters = [];\n    /**\n     * parallel feedback comb filters\n     */\n\n    this._feedbackCombFilters = [];\n    const options = optionsFromArguments(JCReverb.getDefaults(), arguments, [\"roomSize\"]);\n    this.roomSize = new Signal({\n      context: this.context,\n      value: options.roomSize,\n      units: \"normalRange\"\n    });\n    this._scaleRoomSize = new Scale({\n      context: this.context,\n      min: -0.733,\n      max: 0.197\n    }); // make the allpass filters\n\n    this._allpassFilters = allpassFilterFreqs.map(freq => {\n      const allpass = this.context.createBiquadFilter();\n      allpass.type = \"allpass\";\n      allpass.frequency.value = freq;\n      return allpass;\n    }); // and the comb filters\n\n    this._feedbackCombFilters = combFilterDelayTimes.map((delayTime, index) => {\n      const fbcf = new FeedbackCombFilter({\n        context: this.context,\n        delayTime\n      });\n\n      this._scaleRoomSize.connect(fbcf.resonance);\n\n      fbcf.resonance.value = combFilterResonances[index];\n\n      if (index < combFilterDelayTimes.length / 2) {\n        this.connectEffectLeft(...this._allpassFilters, fbcf);\n      } else {\n        this.connectEffectRight(...this._allpassFilters, fbcf);\n      }\n\n      return fbcf;\n    }); // chain the allpass filters together\n\n    this.roomSize.connect(this._scaleRoomSize);\n    readOnly(this, [\"roomSize\"]);\n  }\n\n  static getDefaults() {\n    return Object.assign(StereoEffect.getDefaults(), {\n      roomSize: 0.5\n    });\n  }\n\n  dispose() {\n    super.dispose();\n\n    this._allpassFilters.forEach(apf => apf.disconnect());\n\n    this._feedbackCombFilters.forEach(fbcf => fbcf.dispose());\n\n    this.roomSize.dispose();\n\n    this._scaleRoomSize.dispose();\n\n    return this;\n  }\n\n}","map":{"version":3,"mappings":"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","names":["StereoEffect","optionsFromArguments","Scale","Signal","FeedbackCombFilter","readOnly","combFilterDelayTimes","combFilterResonances","allpassFilterFreqs","JCReverb","constructor","getDefaults","arguments","options","roomSize","context","value","units","_scaleRoomSize","min","max","_allpassFilters","map","freq","allpass","createBiquadFilter","type","frequency","_feedbackCombFilters","delayTime","index","fbcf","connect","resonance","length","connectEffectLeft","connectEffectRight","Object","assign","dispose","forEach","apf","disconnect"],"sourceRoot":"","sources":["../../../Tone/effect/JCReverb.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"module"}