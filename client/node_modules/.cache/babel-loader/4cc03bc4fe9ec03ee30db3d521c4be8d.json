{"ast":null,"code":"import { Volume } from \"../../component/channel/Volume\";\nimport { optionsFromArguments } from \"../util/Defaults\";\nimport { onContextClose, onContextInit } from \"./ContextInitialization\";\nimport { Gain } from \"./Gain\";\nimport { connectSeries, ToneAudioNode } from \"./ToneAudioNode\";\n/**\n * A single master output which is connected to the\n * AudioDestinationNode (aka your speakers).\n * It provides useful conveniences such as the ability\n * to set the volume and mute the entire application.\n * It also gives you the ability to apply master effects to your application.\n *\n * @example\n * const oscillator = new Tone.Oscillator().start();\n * // the audio will go from the oscillator to the speakers\n * oscillator.connect(Tone.getDestination());\n * // a convenience for connecting to the master output is also provided:\n * oscillator.toDestination();\n * @category Core\n */\n\nexport class Destination extends ToneAudioNode {\n  constructor() {\n    super(optionsFromArguments(Destination.getDefaults(), arguments));\n    this.name = \"Destination\";\n    this.input = new Volume({\n      context: this.context\n    });\n    this.output = new Gain({\n      context: this.context\n    });\n    /**\n     * The volume of the master output in decibels. -Infinity is silent, and 0 is no change.\n     * @example\n     * const osc = new Tone.Oscillator().toDestination();\n     * osc.start();\n     * // ramp the volume down to silent over 10 seconds\n     * Tone.getDestination().volume.rampTo(-Infinity, 10);\n     */\n\n    this.volume = this.input.volume;\n    const options = optionsFromArguments(Destination.getDefaults(), arguments);\n    connectSeries(this.input, this.output, this.context.rawContext.destination);\n    this.mute = options.mute;\n    this._internalChannels = [this.input, this.context.rawContext.destination, this.output];\n  }\n\n  static getDefaults() {\n    return Object.assign(ToneAudioNode.getDefaults(), {\n      mute: false,\n      volume: 0\n    });\n  }\n  /**\n   * Mute the output.\n   * @example\n   * const oscillator = new Tone.Oscillator().start().toDestination();\n   * setTimeout(() => {\n   * \t// mute the output\n   * \tTone.Destination.mute = true;\n   * }, 1000);\n   */\n\n\n  get mute() {\n    return this.input.mute;\n  }\n\n  set mute(mute) {\n    this.input.mute = mute;\n  }\n  /**\n   * Add a master effects chain. NOTE: this will disconnect any nodes which were previously\n   * chained in the master effects chain.\n   * @param args All arguments will be connected in a row and the Master will be routed through it.\n   * @example\n   * // route all audio through a filter and compressor\n   * const lowpass = new Tone.Filter(800, \"lowpass\");\n   * const compressor = new Tone.Compressor(-18);\n   * Tone.Destination.chain(lowpass, compressor);\n   */\n\n\n  chain() {\n    this.input.disconnect();\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    args.unshift(this.input);\n    args.push(this.output);\n    connectSeries(...args);\n    return this;\n  }\n  /**\n   * The maximum number of channels the system can output\n   * @example\n   * console.log(Tone.Destination.maxChannelCount);\n   */\n\n\n  get maxChannelCount() {\n    return this.context.rawContext.destination.maxChannelCount;\n  }\n  /**\n   * Clean up\n   */\n\n\n  dispose() {\n    super.dispose();\n    this.volume.dispose();\n    return this;\n  }\n\n} //-------------------------------------\n// \tINITIALIZATION\n//-------------------------------------\n\nonContextInit(context => {\n  context.destination = new Destination({\n    context\n  });\n});\nonContextClose(context => {\n  context.destination.dispose();\n});","map":{"version":3,"mappings":"AAAA,SAASA,MAAT,QAAuB,gCAAvB;AAEA,SAASC,oBAAT,QAAqC,kBAArC;AACA,SAASC,cAAT,EAAyBC,aAAzB,QAA8C,yBAA9C;AACA,SAASC,IAAT,QAAqB,QAArB;AAEA,SAASC,aAAT,EAAwBC,aAAxB,QAAmE,iBAAnE;AAOA;;;;;;;;;;;;;;;;AAeA,OAAM,MAAOC,WAAP,SAA2BD,aAA3B,CAA4D;EAkBjEE;IAEC,MAAMP,oBAAoB,CAACM,WAAW,CAACE,WAAZ,EAAD,EAA4BC,SAA5B,CAA1B;IAlBQ,YAAe,aAAf;IAET,aAAgB,IAAIV,MAAJ,CAAW;MAAEW,OAAO,EAAE,KAAKA;IAAhB,CAAX,CAAhB;IACA,cAAe,IAAIP,IAAJ,CAAS;MAAEO,OAAO,EAAE,KAAKA;IAAhB,CAAT,CAAf;IAEA;;;;;;;;;IAQA,cAA4B,KAAKC,KAAL,CAAWC,MAAvC;IAMC,MAAMC,OAAO,GAAGb,oBAAoB,CAACM,WAAW,CAACE,WAAZ,EAAD,EAA4BC,SAA5B,CAApC;IAEAL,aAAa,CAAC,KAAKO,KAAN,EAAa,KAAKG,MAAlB,EAA0B,KAAKJ,OAAL,CAAaK,UAAb,CAAwBC,WAAlD,CAAb;IAEA,KAAKC,IAAL,GAAYJ,OAAO,CAACI,IAApB;IACA,KAAKC,iBAAL,GAAyB,CAAC,KAAKP,KAAN,EAAa,KAAKD,OAAL,CAAaK,UAAb,CAAwBC,WAArC,EAAkD,KAAKF,MAAvD,CAAzB;EACA;;EAEiB,OAAXN,WAAW;IACjB,OAAOW,MAAM,CAACC,MAAP,CAAcf,aAAa,CAACG,WAAd,EAAd,EAA2C;MACjDS,IAAI,EAAE,KAD2C;MAEjDL,MAAM,EAAE;IAFyC,CAA3C,CAAP;EAIA;EAED;;;;;;;;;;;EASQ,IAAJK,IAAI;IACP,OAAO,KAAKN,KAAL,CAAWM,IAAlB;EACA;;EACO,IAAJA,IAAI,CAACA,IAAD,EAAc;IACrB,KAAKN,KAAL,CAAWM,IAAX,GAAkBA,IAAlB;EACA;EAED;;;;;;;;;;;;EAUAI,KAAK,GAA0C;IAC9C,KAAKV,KAAL,CAAWW,UAAX;;IAD8C,kCAAtCC,IAAsC;MAAtCA,IAAsC;IAAA;;IAE9CA,IAAI,CAACC,OAAL,CAAa,KAAKb,KAAlB;IACAY,IAAI,CAACE,IAAL,CAAU,KAAKX,MAAf;IACAV,aAAa,CAAC,GAAGmB,IAAJ,CAAb;IACA,OAAO,IAAP;EACA;EAED;;;;;;;EAKmB,IAAfG,eAAe;IAClB,OAAO,KAAKhB,OAAL,CAAaK,UAAb,CAAwBC,WAAxB,CAAoCU,eAA3C;EACA;EAED;;;;;EAGAC,OAAO;IACN,MAAMA,OAAN;IACA,KAAKf,MAAL,CAAYe,OAAZ;IACA,OAAO,IAAP;EACA;;AAtFgE,C,CAyFlE;AACA;AACA;;AAEAzB,aAAa,CAACQ,OAAO,IAAG;EACvBA,OAAO,CAACM,WAAR,GAAsB,IAAIV,WAAJ,CAAgB;IAAEI;EAAF,CAAhB,CAAtB;AACA,CAFY,CAAb;AAIAT,cAAc,CAACS,OAAO,IAAG;EACxBA,OAAO,CAACM,WAAR,CAAoBW,OAApB;AACA,CAFa,CAAd","names":["Volume","optionsFromArguments","onContextClose","onContextInit","Gain","connectSeries","ToneAudioNode","Destination","constructor","getDefaults","arguments","context","input","volume","options","output","rawContext","destination","mute","_internalChannels","Object","assign","chain","disconnect","args","unshift","push","maxChannelCount","dispose"],"sourceRoot":"","sources":["../../../../Tone/core/context/Destination.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"module"}