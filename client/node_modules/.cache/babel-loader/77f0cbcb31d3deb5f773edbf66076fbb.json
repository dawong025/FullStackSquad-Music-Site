{"ast":null,"code":"import { Gain } from \"../core/context/Gain\";\nimport { optionsFromArguments } from \"../core/util/Defaults\";\nimport { Signal } from \"./Signal\";\n/**\n * Multiply two incoming signals. Or, if a number is given in the constructor,\n * multiplies the incoming signal by that value.\n *\n * @example\n * // multiply two signals\n * const mult = new Tone.Multiply();\n * const sigA = new Tone.Signal(3);\n * const sigB = new Tone.Signal(4);\n * sigA.connect(mult);\n * sigB.connect(mult.factor);\n * // output of mult is 12.\n * @example\n * // multiply a signal and a number\n * const mult = new Tone.Multiply(10);\n * const sig = new Tone.Signal(2).connect(mult);\n * // the output of mult is 20.\n * @category Signal\n */\n\nexport class Multiply extends Signal {\n  constructor() {\n    super(Object.assign(optionsFromArguments(Multiply.getDefaults(), arguments, [\"value\"])));\n    this.name = \"Multiply\";\n    /**\n     * Indicates if the value should be overridden on connection\n     */\n\n    this.override = false;\n    const options = optionsFromArguments(Multiply.getDefaults(), arguments, [\"value\"]);\n    this._mult = this.input = this.output = new Gain({\n      context: this.context,\n      minValue: options.minValue,\n      maxValue: options.maxValue\n    });\n    this.factor = this._param = this._mult.gain;\n    this.factor.setValueAtTime(options.value, 0);\n  }\n\n  static getDefaults() {\n    return Object.assign(Signal.getDefaults(), {\n      value: 0\n    });\n  }\n\n  dispose() {\n    super.dispose();\n\n    this._mult.dispose();\n\n    return this;\n  }\n\n}","map":{"version":3,"mappings":"AAAA,SAASA,IAAT,QAAqB,sBAArB;AAEA,SAASC,oBAAT,QAAqC,uBAArC;AACA,SAASC,MAAT,QAAsC,UAAtC;AAGA;;;;;;;;;;;;;;;;;;;;AAmBA,OAAM,MAAOC,QAAP,SAA2ED,MAA3E,CAA2F;EAkChGE;IACC,MAAMC,MAAM,CAACC,MAAP,CAAcL,oBAAoB,CAACE,QAAQ,CAACI,WAAT,EAAD,EAAyBC,SAAzB,EAAoC,CAAC,OAAD,CAApC,CAAlC,CAAN;IAjCQ,YAAe,UAAf;IAET;;;;IAGS,gBAAW,KAAX;IA6BR,MAAMC,OAAO,GAAGR,oBAAoB,CAACE,QAAQ,CAACI,WAAT,EAAD,EAAyBC,SAAzB,EAAoC,CAAC,OAAD,CAApC,CAApC;IAEA,KAAKE,KAAL,GAAa,KAAKC,KAAL,GAAa,KAAKC,MAAL,GAAc,IAAIZ,IAAJ,CAAS;MAChDa,OAAO,EAAE,KAAKA,OADkC;MAEhDC,QAAQ,EAAEL,OAAO,CAACK,QAF8B;MAGhDC,QAAQ,EAAEN,OAAO,CAACM;IAH8B,CAAT,CAAxC;IAMA,KAAKC,MAAL,GAAc,KAAKC,MAAL,GAAc,KAAKP,KAAL,CAAWQ,IAAvC;IACA,KAAKF,MAAL,CAAYG,cAAZ,CAA2BV,OAAO,CAACW,KAAnC,EAA0C,CAA1C;EACA;;EAEiB,OAAXb,WAAW;IACjB,OAAOF,MAAM,CAACC,MAAP,CAAcJ,MAAM,CAACK,WAAP,EAAd,EAAoC;MAC1Ca,KAAK,EAAE;IADmC,CAApC,CAAP;EAGA;;EAEDC,OAAO;IACN,MAAMA,OAAN;;IACA,KAAKX,KAAL,CAAWW,OAAX;;IACA,OAAO,IAAP;EACA;;AA1D+F","names":["Gain","optionsFromArguments","Signal","Multiply","constructor","Object","assign","getDefaults","arguments","options","_mult","input","output","context","minValue","maxValue","factor","_param","gain","setValueAtTime","value","dispose"],"sourceRoot":"","sources":["../../../Tone/signal/Multiply.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"module"}