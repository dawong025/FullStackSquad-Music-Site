{"ast":null,"code":"import { Gain } from \"../../core/context/Gain\";\nimport { connectSeries, ToneAudioNode } from \"../../core/context/ToneAudioNode\";\nimport { optionsFromArguments } from \"../../core/util/Defaults\";\nimport { readOnly, writable } from \"../../core/util/Interface\";\nimport { isNumber } from \"../../core/util/TypeCheck\";\nimport { Signal } from \"../../signal/Signal\";\nimport { assert } from \"../../core/util/Debug\";\nimport { BiquadFilter } from \"./BiquadFilter\";\n/**\n * Tone.Filter is a filter which allows for all of the same native methods\n * as the [BiquadFilterNode](http://webaudio.github.io/web-audio-api/#the-biquadfilternode-interface).\n * Tone.Filter has the added ability to set the filter rolloff at -12\n * (default), -24 and -48.\n * @example\n * const filter = new Tone.Filter(1500, \"highpass\").toDestination();\n * filter.frequency.rampTo(20000, 10);\n * const noise = new Tone.Noise().connect(filter).start();\n * @category Component\n */\n\nexport class Filter extends ToneAudioNode {\n  constructor() {\n    super(optionsFromArguments(Filter.getDefaults(), arguments, [\"frequency\", \"type\", \"rolloff\"]));\n    this.name = \"Filter\";\n    this.input = new Gain({\n      context: this.context\n    });\n    this.output = new Gain({\n      context: this.context\n    });\n    this._filters = [];\n    const options = optionsFromArguments(Filter.getDefaults(), arguments, [\"frequency\", \"type\", \"rolloff\"]);\n    this._filters = [];\n    this.Q = new Signal({\n      context: this.context,\n      units: \"positive\",\n      value: options.Q\n    });\n    this.frequency = new Signal({\n      context: this.context,\n      units: \"frequency\",\n      value: options.frequency\n    });\n    this.detune = new Signal({\n      context: this.context,\n      units: \"cents\",\n      value: options.detune\n    });\n    this.gain = new Signal({\n      context: this.context,\n      units: \"decibels\",\n      convert: false,\n      value: options.gain\n    });\n    this._type = options.type;\n    this.rolloff = options.rolloff;\n    readOnly(this, [\"detune\", \"frequency\", \"gain\", \"Q\"]);\n  }\n\n  static getDefaults() {\n    return Object.assign(ToneAudioNode.getDefaults(), {\n      Q: 1,\n      detune: 0,\n      frequency: 350,\n      gain: 0,\n      rolloff: -12,\n      type: \"lowpass\"\n    });\n  }\n  /**\n   * The type of the filter. Types: \"lowpass\", \"highpass\",\n   * \"bandpass\", \"lowshelf\", \"highshelf\", \"notch\", \"allpass\", or \"peaking\".\n   */\n\n\n  get type() {\n    return this._type;\n  }\n\n  set type(type) {\n    const types = [\"lowpass\", \"highpass\", \"bandpass\", \"lowshelf\", \"highshelf\", \"notch\", \"allpass\", \"peaking\"];\n    assert(types.indexOf(type) !== -1, `Invalid filter type: ${type}`);\n    this._type = type;\n\n    this._filters.forEach(filter => filter.type = type);\n  }\n  /**\n   * The rolloff of the filter which is the drop in db\n   * per octave. Implemented internally by cascading filters.\n   * Only accepts the values -12, -24, -48 and -96.\n   */\n\n\n  get rolloff() {\n    return this._rolloff;\n  }\n\n  set rolloff(rolloff) {\n    const rolloffNum = isNumber(rolloff) ? rolloff : parseInt(rolloff, 10);\n    const possibilities = [-12, -24, -48, -96];\n    let cascadingCount = possibilities.indexOf(rolloffNum); // check the rolloff is valid\n\n    assert(cascadingCount !== -1, `rolloff can only be ${possibilities.join(\", \")}`);\n    cascadingCount += 1;\n    this._rolloff = rolloffNum;\n    this.input.disconnect();\n\n    this._filters.forEach(filter => filter.disconnect());\n\n    this._filters = new Array(cascadingCount);\n\n    for (let count = 0; count < cascadingCount; count++) {\n      const filter = new BiquadFilter({\n        context: this.context\n      });\n      filter.type = this._type;\n      this.frequency.connect(filter.frequency);\n      this.detune.connect(filter.detune);\n      this.Q.connect(filter.Q);\n      this.gain.connect(filter.gain);\n      this._filters[count] = filter;\n    }\n\n    this._internalChannels = this._filters;\n    connectSeries(this.input, ...this._internalChannels, this.output);\n  }\n  /**\n   * Get the frequency response curve. This curve represents how the filter\n   * responses to frequencies between 20hz-20khz.\n   * @param  len The number of values to return\n   * @return The frequency response curve between 20-20kHz\n   */\n\n\n  getFrequencyResponse() {\n    let len = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 128;\n    const filterClone = new BiquadFilter({\n      frequency: this.frequency.value,\n      gain: this.gain.value,\n      Q: this.Q.value,\n      type: this._type,\n      detune: this.detune.value\n    }); // start with all 1s\n\n    const totalResponse = new Float32Array(len).map(() => 1);\n\n    this._filters.forEach(() => {\n      const response = filterClone.getFrequencyResponse(len);\n      response.forEach((val, i) => totalResponse[i] *= val);\n    });\n\n    filterClone.dispose();\n    return totalResponse;\n  }\n  /**\n   * Clean up.\n   */\n\n\n  dispose() {\n    super.dispose();\n\n    this._filters.forEach(filter => {\n      filter.dispose();\n    });\n\n    writable(this, [\"detune\", \"frequency\", \"gain\", \"Q\"]);\n    this.frequency.dispose();\n    this.Q.dispose();\n    this.detune.dispose();\n    this.gain.dispose();\n    return this;\n  }\n\n}","map":{"version":3,"mappings":"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","names":["Gain","connectSeries","ToneAudioNode","optionsFromArguments","readOnly","writable","isNumber","Signal","assert","BiquadFilter","Filter","constructor","getDefaults","arguments","context","options","_filters","Q","units","value","frequency","detune","gain","convert","_type","type","rolloff","Object","assign","types","indexOf","forEach","filter","_rolloff","rolloffNum","parseInt","possibilities","cascadingCount","join","input","disconnect","Array","count","connect","_internalChannels","output","getFrequencyResponse","len","filterClone","totalResponse","Float32Array","map","response","val","i","dispose"],"sourceRoot":"","sources":["../../../../Tone/component/filter/Filter.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"module"}