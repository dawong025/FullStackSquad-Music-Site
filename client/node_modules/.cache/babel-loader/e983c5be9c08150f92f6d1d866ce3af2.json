{"ast":null,"code":"import { wrapIIRFilterNodeGetFrequencyResponseMethod } from '../helpers/wrap-iir-filter-node-get-frequency-response-method';\nconst DEFAULT_OPTIONS = {\n  channelCount: 2,\n  channelCountMode: 'max',\n  channelInterpretation: 'speakers'\n};\nexport const createIIRFilterNodeConstructor = (audioNodeConstructor, createNativeIIRFilterNode, createIIRFilterNodeRenderer, getNativeContext, isNativeOfflineAudioContext, setAudioNodeTailTime) => {\n  return class IIRFilterNode extends audioNodeConstructor {\n    constructor(context, options) {\n      const nativeContext = getNativeContext(context);\n      const isOffline = isNativeOfflineAudioContext(nativeContext);\n      const mergedOptions = { ...DEFAULT_OPTIONS,\n        ...options\n      };\n      const nativeIIRFilterNode = createNativeIIRFilterNode(nativeContext, isOffline ? null : context.baseLatency, mergedOptions);\n      const iirFilterNodeRenderer = isOffline ? createIIRFilterNodeRenderer(mergedOptions.feedback, mergedOptions.feedforward) : null;\n      super(context, false, nativeIIRFilterNode, iirFilterNodeRenderer); // Bug #23 & #24: FirefoxDeveloper does not throw an InvalidAccessError.\n      // @todo Write a test which allows other browsers to remain unpatched.\n\n      wrapIIRFilterNodeGetFrequencyResponseMethod(nativeIIRFilterNode);\n      this._nativeIIRFilterNode = nativeIIRFilterNode; // @todo Determine a meaningful tail-time instead of just using one second.\n\n      setAudioNodeTailTime(this, 1);\n    }\n\n    getFrequencyResponse(frequencyHz, magResponse, phaseResponse) {\n      return this._nativeIIRFilterNode.getFrequencyResponse(frequencyHz, magResponse, phaseResponse);\n    }\n\n  };\n};","map":{"version":3,"mappings":"AAAA,SAASA,2CAAT,QAA4D,+DAA5D;AAIA,MAAMC,eAAe,GAAG;EACpBC,YAAY,EAAE,CADM;EAEpBC,gBAAgB,EAAE,KAFE;EAGpBC,qBAAqB,EAAE;AAHH,CAAxB;AAMA,OAAO,MAAMC,8BAA8B,GAAqC,CAC5EC,oBAD4E,EAE5EC,yBAF4E,EAG5EC,2BAH4E,EAI5EC,gBAJ4E,EAK5EC,2BAL4E,EAM5EC,oBAN4E,KAO5E;EACA,OAAO,MAAMC,aAAN,SAAgDN,oBAAhD,CAAuE;IAG1EO,YACIC,OADJ,EAEIC,OAFJ,EAEoI;MAEhI,MAAMC,aAAa,GAAGP,gBAAgB,CAACK,OAAD,CAAtC;MACA,MAAMG,SAAS,GAAGP,2BAA2B,CAACM,aAAD,CAA7C;MACA,MAAME,aAAa,GAAG,EAAE,GAAGjB,eAAL;QAAsB,GAAGc;MAAzB,CAAtB;MACA,MAAMI,mBAAmB,GAAGZ,yBAAyB,CACjDS,aADiD,EAEjDC,SAAS,GAAG,IAAH,GAAuCH,OAAS,CAACM,WAFT,EAGjDF,aAHiD,CAArD;MAKA,MAAMG,qBAAqB,GACtBJ,SAAS,GAAGT,2BAA2B,CAACU,aAAa,CAACI,QAAf,EAAyBJ,aAAa,CAACK,WAAvC,CAA9B,GAAoF,IADlG;MAIA,MAAMT,OAAN,EAAe,KAAf,EAAsBK,mBAAtB,EAA2CE,qBAA3C,EAdgI,CAgBhI;MACA;;MACArB,2CAA2C,CAACmB,mBAAD,CAA3C;MAEA,KAAKK,oBAAL,GAA4BL,mBAA5B,CApBgI,CAsBhI;;MACAR,oBAAoB,CAAC,IAAD,EAAO,CAAP,CAApB;IACH;;IAEMc,oBAAoB,CAACC,WAAD,EAA4BC,WAA5B,EAAuDC,aAAvD,EAAkF;MACzG,OAAO,KAAKJ,oBAAL,CAA0BC,oBAA1B,CAA+CC,WAA/C,EAA4DC,WAA5D,EAAyEC,aAAzE,CAAP;IACH;;EAjCyE,CAA9E;AAmCH,CA3CM","names":["wrapIIRFilterNodeGetFrequencyResponseMethod","DEFAULT_OPTIONS","channelCount","channelCountMode","channelInterpretation","createIIRFilterNodeConstructor","audioNodeConstructor","createNativeIIRFilterNode","createIIRFilterNodeRenderer","getNativeContext","isNativeOfflineAudioContext","setAudioNodeTailTime","IIRFilterNode","constructor","context","options","nativeContext","isOffline","mergedOptions","nativeIIRFilterNode","baseLatency","iirFilterNodeRenderer","feedback","feedforward","_nativeIIRFilterNode","getFrequencyResponse","frequencyHz","magResponse","phaseResponse"],"sourceRoot":"","sources":["../../../src/factories/iir-filter-node-constructor.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"module"}