{"ast":null,"code":"import { Source } from \"../Source\";\nimport { noOp } from \"../../core/util/Interface\";\nimport { ToneAudioBuffer } from \"../../core/context/ToneAudioBuffer\";\nimport { defaultArg, optionsFromArguments } from \"../../core/util/Defaults\";\nimport { Clock } from \"../../core/clock/Clock\";\nimport { ToneBufferSource } from \"./ToneBufferSource\";\nimport { intervalToFrequencyRatio } from \"../../core/type/Conversions\";\nimport { assertRange } from \"../../core/util/Debug\";\n/**\n * GrainPlayer implements [granular synthesis](https://en.wikipedia.org/wiki/Granular_synthesis).\n * Granular Synthesis enables you to adjust pitch and playback rate independently. The grainSize is the\n * amount of time each small chunk of audio is played for and the overlap is the\n * amount of crossfading transition time between successive grains.\n * @category Source\n */\n\nexport class GrainPlayer extends Source {\n  constructor() {\n    super(optionsFromArguments(GrainPlayer.getDefaults(), arguments, [\"url\", \"onload\"]));\n    this.name = \"GrainPlayer\";\n    /**\n     * Internal loopStart value\n     */\n\n    this._loopStart = 0;\n    /**\n     * Internal loopStart value\n     */\n\n    this._loopEnd = 0;\n    /**\n     * All of the currently playing BufferSources\n     */\n\n    this._activeSources = [];\n    const options = optionsFromArguments(GrainPlayer.getDefaults(), arguments, [\"url\", \"onload\"]);\n    this.buffer = new ToneAudioBuffer({\n      onload: options.onload,\n      onerror: options.onerror,\n      reverse: options.reverse,\n      url: options.url\n    });\n    this._clock = new Clock({\n      context: this.context,\n      callback: this._tick.bind(this),\n      frequency: 1 / options.grainSize\n    });\n    this._playbackRate = options.playbackRate;\n    this._grainSize = options.grainSize;\n    this._overlap = options.overlap;\n    this.detune = options.detune; // setup\n\n    this.overlap = options.overlap;\n    this.loop = options.loop;\n    this.playbackRate = options.playbackRate;\n    this.grainSize = options.grainSize;\n    this.loopStart = options.loopStart;\n    this.loopEnd = options.loopEnd;\n    this.reverse = options.reverse;\n\n    this._clock.on(\"stop\", this._onstop.bind(this));\n  }\n\n  static getDefaults() {\n    return Object.assign(Source.getDefaults(), {\n      onload: noOp,\n      onerror: noOp,\n      overlap: 0.1,\n      grainSize: 0.2,\n      playbackRate: 1,\n      detune: 0,\n      loop: false,\n      loopStart: 0,\n      loopEnd: 0,\n      reverse: false\n    });\n  }\n  /**\n   * Internal start method\n   */\n\n\n  _start(time, offset, duration) {\n    offset = defaultArg(offset, 0);\n    offset = this.toSeconds(offset);\n    time = this.toSeconds(time);\n\n    const grainSize = 1 / this._clock.frequency.getValueAtTime(time);\n\n    this._clock.start(time, offset / grainSize);\n\n    if (duration) {\n      this.stop(time + this.toSeconds(duration));\n    }\n  }\n  /**\n   * Stop and then restart the player from the beginning (or offset)\n   * @param  time When the player should start.\n   * @param  offset The offset from the beginning of the sample to start at.\n   * @param  duration How long the sample should play. If no duration is given,\n   * \t\t\t\t\tit will default to the full length of the sample (minus any offset)\n   */\n\n\n  restart(time, offset, duration) {\n    super.restart(time, offset, duration);\n    return this;\n  }\n\n  _restart(time, offset, duration) {\n    this._stop(time);\n\n    this._start(time, offset, duration);\n  }\n  /**\n   * Internal stop method\n   */\n\n\n  _stop(time) {\n    this._clock.stop(time);\n  }\n  /**\n   * Invoked when the clock is stopped\n   */\n\n\n  _onstop(time) {\n    // stop the players\n    this._activeSources.forEach(source => {\n      source.fadeOut = 0;\n      source.stop(time);\n    });\n\n    this.onstop(this);\n  }\n  /**\n   * Invoked on each clock tick. scheduled a new grain at this time.\n   */\n\n\n  _tick(time) {\n    // check if it should stop looping\n    const ticks = this._clock.getTicksAtTime(time);\n\n    const offset = ticks * this._grainSize;\n    this.log(\"offset\", offset);\n\n    if (!this.loop && offset > this.buffer.duration) {\n      this.stop(time);\n      return;\n    } // at the beginning of the file, the fade in should be 0\n\n\n    const fadeIn = offset < this._overlap ? 0 : this._overlap; // create a buffer source\n\n    const source = new ToneBufferSource({\n      context: this.context,\n      url: this.buffer,\n      fadeIn: fadeIn,\n      fadeOut: this._overlap,\n      loop: this.loop,\n      loopStart: this._loopStart,\n      loopEnd: this._loopEnd,\n      // compute the playbackRate based on the detune\n      playbackRate: intervalToFrequencyRatio(this.detune / 100)\n    }).connect(this.output);\n    source.start(time, this._grainSize * ticks);\n    source.stop(time + this._grainSize / this.playbackRate); // add it to the active sources\n\n    this._activeSources.push(source); // remove it when it's done\n\n\n    source.onended = () => {\n      const index = this._activeSources.indexOf(source);\n\n      if (index !== -1) {\n        this._activeSources.splice(index, 1);\n      }\n    };\n  }\n  /**\n   * The playback rate of the sample\n   */\n\n\n  get playbackRate() {\n    return this._playbackRate;\n  }\n\n  set playbackRate(rate) {\n    assertRange(rate, 0.001);\n    this._playbackRate = rate;\n    this.grainSize = this._grainSize;\n  }\n  /**\n   * The loop start time.\n   */\n\n\n  get loopStart() {\n    return this._loopStart;\n  }\n\n  set loopStart(time) {\n    if (this.buffer.loaded) {\n      assertRange(this.toSeconds(time), 0, this.buffer.duration);\n    }\n\n    this._loopStart = this.toSeconds(time);\n  }\n  /**\n   * The loop end time.\n   */\n\n\n  get loopEnd() {\n    return this._loopEnd;\n  }\n\n  set loopEnd(time) {\n    if (this.buffer.loaded) {\n      assertRange(this.toSeconds(time), 0, this.buffer.duration);\n    }\n\n    this._loopEnd = this.toSeconds(time);\n  }\n  /**\n   * The direction the buffer should play in\n   */\n\n\n  get reverse() {\n    return this.buffer.reverse;\n  }\n\n  set reverse(rev) {\n    this.buffer.reverse = rev;\n  }\n  /**\n   * The size of each chunk of audio that the\n   * buffer is chopped into and played back at.\n   */\n\n\n  get grainSize() {\n    return this._grainSize;\n  }\n\n  set grainSize(size) {\n    this._grainSize = this.toSeconds(size);\n\n    this._clock.frequency.setValueAtTime(this._playbackRate / this._grainSize, this.now());\n  }\n  /**\n   * The duration of the cross-fade between successive grains.\n   */\n\n\n  get overlap() {\n    return this._overlap;\n  }\n\n  set overlap(time) {\n    const computedTime = this.toSeconds(time);\n    assertRange(computedTime, 0);\n    this._overlap = computedTime;\n  }\n  /**\n   * If all the buffer is loaded\n   */\n\n\n  get loaded() {\n    return this.buffer.loaded;\n  }\n\n  dispose() {\n    super.dispose();\n    this.buffer.dispose();\n\n    this._clock.dispose();\n\n    this._activeSources.forEach(source => source.dispose());\n\n    return this;\n  }\n\n}","map":{"version":3,"mappings":"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","names":["Source","noOp","ToneAudioBuffer","defaultArg","optionsFromArguments","Clock","ToneBufferSource","intervalToFrequencyRatio","assertRange","GrainPlayer","constructor","getDefaults","arguments","options","buffer","onload","onerror","reverse","url","_clock","context","callback","_tick","bind","frequency","grainSize","_playbackRate","playbackRate","_grainSize","_overlap","overlap","detune","loop","loopStart","loopEnd","on","_onstop","Object","assign","_start","time","offset","duration","toSeconds","getValueAtTime","start","stop","restart","_restart","_stop","_activeSources","forEach","source","fadeOut","onstop","ticks","getTicksAtTime","log","fadeIn","_loopStart","_loopEnd","connect","output","push","onended","index","indexOf","splice","rate","loaded","rev","size","setValueAtTime","now","computedTime","dispose"],"sourceRoot":"","sources":["../../../../Tone/source/buffer/GrainPlayer.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"module"}