{"ast":null,"code":"import { Envelope } from \"../component/envelope/Envelope\";\nimport { Filter } from \"../component/filter/Filter\";\nimport { Gain } from \"../core/context/Gain\";\nimport { ToneAudioNode } from \"../core/context/ToneAudioNode\";\nimport { deepMerge, omitFromObject, optionsFromArguments } from \"../core/util/Defaults\";\nimport { noOp } from \"../core/util/Interface\";\nimport { Multiply } from \"../signal/Multiply\";\nimport { Scale } from \"../signal/Scale\";\nimport { Signal } from \"../signal/Signal\";\nimport { FMOscillator } from \"../source/oscillator/FMOscillator\";\nimport { Monophonic } from \"./Monophonic\";\n/**\n * Inharmonic ratio of frequencies based on the Roland TR-808\n * Taken from https://ccrma.stanford.edu/papers/tr-808-cymbal-physically-informed-circuit-bendable-digital-model\n */\n\nconst inharmRatios = [1.0, 1.483, 1.932, 2.546, 2.630, 3.897];\n/**\n * A highly inharmonic and spectrally complex source with a highpass filter\n * and amplitude envelope which is good for making metallophone sounds.\n * Based on CymbalSynth by [@polyrhythmatic](https://github.com/polyrhythmatic).\n * Inspiration from [Sound on Sound](https://shorturl.at/rSZ12).\n * @category Instrument\n */\n\nexport class MetalSynth extends Monophonic {\n  constructor() {\n    super(optionsFromArguments(MetalSynth.getDefaults(), arguments));\n    this.name = \"MetalSynth\";\n    /**\n     * The array of FMOscillators\n     */\n\n    this._oscillators = [];\n    /**\n     * The frequency multipliers\n     */\n\n    this._freqMultipliers = [];\n    const options = optionsFromArguments(MetalSynth.getDefaults(), arguments);\n    this.detune = new Signal({\n      context: this.context,\n      units: \"cents\",\n      value: options.detune\n    });\n    this.frequency = new Signal({\n      context: this.context,\n      units: \"frequency\"\n    });\n    this._amplitude = new Gain({\n      context: this.context,\n      gain: 0\n    }).connect(this.output);\n    this._highpass = new Filter({\n      // Q: -3.0102999566398125,\n      Q: 0,\n      context: this.context,\n      type: \"highpass\"\n    }).connect(this._amplitude);\n\n    for (let i = 0; i < inharmRatios.length; i++) {\n      const osc = new FMOscillator({\n        context: this.context,\n        harmonicity: options.harmonicity,\n        modulationIndex: options.modulationIndex,\n        modulationType: \"square\",\n        onstop: i === 0 ? () => this.onsilence(this) : noOp,\n        type: \"square\"\n      });\n      osc.connect(this._highpass);\n      this._oscillators[i] = osc;\n      const mult = new Multiply({\n        context: this.context,\n        value: inharmRatios[i]\n      });\n      this._freqMultipliers[i] = mult;\n      this.frequency.chain(mult, osc.frequency);\n      this.detune.connect(osc.detune);\n    }\n\n    this._filterFreqScaler = new Scale({\n      context: this.context,\n      max: 7000,\n      min: this.toFrequency(options.resonance)\n    });\n    this.envelope = new Envelope({\n      attack: options.envelope.attack,\n      attackCurve: \"linear\",\n      context: this.context,\n      decay: options.envelope.decay,\n      release: options.envelope.release,\n      sustain: 0\n    });\n    this.envelope.chain(this._filterFreqScaler, this._highpass.frequency);\n    this.envelope.connect(this._amplitude.gain); // set the octaves\n\n    this._octaves = options.octaves;\n    this.octaves = options.octaves;\n  }\n\n  static getDefaults() {\n    return deepMerge(Monophonic.getDefaults(), {\n      envelope: Object.assign(omitFromObject(Envelope.getDefaults(), Object.keys(ToneAudioNode.getDefaults())), {\n        attack: 0.001,\n        decay: 1.4,\n        release: 0.2\n      }),\n      harmonicity: 5.1,\n      modulationIndex: 32,\n      octaves: 1.5,\n      resonance: 4000\n    });\n  }\n  /**\n   * Trigger the attack.\n   * @param time When the attack should be triggered.\n   * @param velocity The velocity that the envelope should be triggered at.\n   */\n\n\n  _triggerEnvelopeAttack(time) {\n    let velocity = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;\n    this.envelope.triggerAttack(time, velocity);\n\n    this._oscillators.forEach(osc => osc.start(time));\n\n    if (this.envelope.sustain === 0) {\n      this._oscillators.forEach(osc => {\n        osc.stop(time + this.toSeconds(this.envelope.attack) + this.toSeconds(this.envelope.decay));\n      });\n    }\n\n    return this;\n  }\n  /**\n   * Trigger the release of the envelope.\n   * @param time When the release should be triggered.\n   */\n\n\n  _triggerEnvelopeRelease(time) {\n    this.envelope.triggerRelease(time);\n\n    this._oscillators.forEach(osc => osc.stop(time + this.toSeconds(this.envelope.release)));\n\n    return this;\n  }\n\n  getLevelAtTime(time) {\n    time = this.toSeconds(time);\n    return this.envelope.getValueAtTime(time);\n  }\n  /**\n   * The modulationIndex of the oscillators which make up the source.\n   * see [[FMOscillator.modulationIndex]]\n   * @min 1\n   * @max 100\n   */\n\n\n  get modulationIndex() {\n    return this._oscillators[0].modulationIndex.value;\n  }\n\n  set modulationIndex(val) {\n    this._oscillators.forEach(osc => osc.modulationIndex.value = val);\n  }\n  /**\n   * The harmonicity of the oscillators which make up the source.\n   * see Tone.FMOscillator.harmonicity\n   * @min 0.1\n   * @max 10\n   */\n\n\n  get harmonicity() {\n    return this._oscillators[0].harmonicity.value;\n  }\n\n  set harmonicity(val) {\n    this._oscillators.forEach(osc => osc.harmonicity.value = val);\n  }\n  /**\n   * The lower level of the highpass filter which is attached to the envelope.\n   * This value should be between [0, 7000]\n   * @min 0\n   * @max 7000\n   */\n\n\n  get resonance() {\n    return this._filterFreqScaler.min;\n  }\n\n  set resonance(val) {\n    this._filterFreqScaler.min = this.toFrequency(val);\n    this.octaves = this._octaves;\n  }\n  /**\n   * The number of octaves above the \"resonance\" frequency\n   * that the filter ramps during the attack/decay envelope\n   * @min 0\n   * @max 8\n   */\n\n\n  get octaves() {\n    return this._octaves;\n  }\n\n  set octaves(val) {\n    this._octaves = val;\n    this._filterFreqScaler.max = this._filterFreqScaler.min * Math.pow(2, val);\n  }\n\n  dispose() {\n    super.dispose();\n\n    this._oscillators.forEach(osc => osc.dispose());\n\n    this._freqMultipliers.forEach(freqMult => freqMult.dispose());\n\n    this.frequency.dispose();\n    this.detune.dispose();\n\n    this._filterFreqScaler.dispose();\n\n    this._amplitude.dispose();\n\n    this.envelope.dispose();\n\n    this._highpass.dispose();\n\n    return this;\n  }\n\n}","map":{"version":3,"mappings":"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","names":["Envelope","Filter","Gain","ToneAudioNode","deepMerge","omitFromObject","optionsFromArguments","noOp","Multiply","Scale","Signal","FMOscillator","Monophonic","inharmRatios","MetalSynth","constructor","getDefaults","arguments","options","detune","context","units","value","frequency","_amplitude","gain","connect","output","_highpass","Q","type","i","length","osc","harmonicity","modulationIndex","modulationType","onstop","onsilence","_oscillators","mult","_freqMultipliers","chain","_filterFreqScaler","max","min","toFrequency","resonance","envelope","attack","attackCurve","decay","release","sustain","_octaves","octaves","Object","assign","keys","_triggerEnvelopeAttack","time","velocity","triggerAttack","forEach","start","stop","toSeconds","_triggerEnvelopeRelease","triggerRelease","getLevelAtTime","getValueAtTime","val","Math","pow","dispose","freqMult"],"sourceRoot":"","sources":["../../../Tone/instrument/MetalSynth.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"module"}