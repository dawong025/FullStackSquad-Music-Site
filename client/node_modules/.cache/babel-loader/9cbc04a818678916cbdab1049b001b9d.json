{"ast":null,"code":"import { getContext } from \"../Global\";\nimport { ftom, mtof } from \"./Conversions\";\nimport { FrequencyClass } from \"./Frequency\";\n/**\n * Midi is a primitive type for encoding Time values.\n * Midi can be constructed with or without the `new` keyword. Midi can be passed\n * into the parameter of any method which takes time as an argument.\n * @category Unit\n */\n\nexport class MidiClass extends FrequencyClass {\n  constructor() {\n    super(...arguments);\n    this.name = \"MidiClass\";\n    this.defaultUnits = \"midi\";\n  }\n  /**\n   * Returns the value of a frequency in the current units\n   */\n\n\n  _frequencyToUnits(freq) {\n    return ftom(super._frequencyToUnits(freq));\n  }\n  /**\n   * Returns the value of a tick in the current time units\n   */\n\n\n  _ticksToUnits(ticks) {\n    return ftom(super._ticksToUnits(ticks));\n  }\n  /**\n   * Return the value of the beats in the current units\n   */\n\n\n  _beatsToUnits(beats) {\n    return ftom(super._beatsToUnits(beats));\n  }\n  /**\n   * Returns the value of a second in the current units\n   */\n\n\n  _secondsToUnits(seconds) {\n    return ftom(super._secondsToUnits(seconds));\n  }\n  /**\n   * Return the value of the frequency as a MIDI note\n   * @example\n   * Tone.Midi(60).toMidi(); // 60\n   */\n\n\n  toMidi() {\n    return this.valueOf();\n  }\n  /**\n   * Return the value of the frequency as a MIDI note\n   * @example\n   * Tone.Midi(60).toFrequency(); // 261.6255653005986\n   */\n\n\n  toFrequency() {\n    return mtof(this.toMidi());\n  }\n  /**\n   * Transposes the frequency by the given number of semitones.\n   * @return A new transposed MidiClass\n   * @example\n   * Tone.Midi(\"A4\").transpose(3); // \"C5\"\n   */\n\n\n  transpose(interval) {\n    return new MidiClass(this.context, this.toMidi() + interval);\n  }\n\n}\n/**\n * Convert a value into a FrequencyClass object.\n * @category Unit\n */\n\nexport function Midi(value, units) {\n  return new MidiClass(getContext(), value, units);\n}","map":{"version":3,"mappings":"AAAA,SAASA,UAAT,QAA2B,WAA3B;AACA,SAASC,IAAT,EAAeC,IAAf,QAA2B,eAA3B;AACA,SAASC,cAAT,QAA8C,aAA9C;AAIA;;;;;;;AAMA,OAAM,MAAOC,SAAP,SAAyBD,cAAzB,CAAiD;EAAvDE;;IAEU,YAAe,WAAf;IAEA,oBAAe,MAAf;EAyDT;EAvDA;;;;;EAGUC,iBAAiB,CAACC,IAAD,EAAY;IACtC,OAAON,IAAI,CAAC,MAAMK,iBAAN,CAAwBC,IAAxB,CAAD,CAAX;EACA;EAED;;;;;EAGUC,aAAa,CAACC,KAAD,EAAa;IACnC,OAAOR,IAAI,CAAC,MAAMO,aAAN,CAAoBC,KAApB,CAAD,CAAX;EACA;EAED;;;;;EAGUC,aAAa,CAACC,KAAD,EAAc;IACpC,OAAOV,IAAI,CAAC,MAAMS,aAAN,CAAoBC,KAApB,CAAD,CAAX;EACA;EAED;;;;;EAGUC,eAAe,CAACC,OAAD,EAAiB;IACzC,OAAOZ,IAAI,CAAC,MAAMW,eAAN,CAAsBC,OAAtB,CAAD,CAAX;EACA;EAED;;;;;;;EAKAC,MAAM;IACL,OAAO,KAAKC,OAAL,EAAP;EACA;EAED;;;;;;;EAKAC,WAAW;IACV,OAAOd,IAAI,CAAC,KAAKY,MAAL,EAAD,CAAX;EACA;EAED;;;;;;;;EAMAG,SAAS,CAACC,QAAD,EAAmB;IAC3B,OAAO,IAAId,SAAJ,CAAc,KAAKe,OAAnB,EAA4B,KAAKL,MAAL,KAAgBI,QAA5C,CAAP;EACA;;AA5DqD;AA+DvD;;;;;AAIA,OAAM,SAAUE,IAAV,CAAeC,KAAf,EAAkCC,KAAlC,EAAuD;EAC5D,OAAO,IAAIlB,SAAJ,CAAcJ,UAAU,EAAxB,EAA4BqB,KAA5B,EAAmCC,KAAnC,CAAP;AACA","names":["getContext","ftom","mtof","FrequencyClass","MidiClass","constructor","_frequencyToUnits","freq","_ticksToUnits","ticks","_beatsToUnits","beats","_secondsToUnits","seconds","toMidi","valueOf","toFrequency","transpose","interval","context","Midi","value","units"],"sourceRoot":"","sources":["../../../../Tone/core/type/Midi.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"module"}