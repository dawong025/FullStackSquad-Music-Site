{"ast":null,"code":"import { optionsFromArguments } from \"../../core/util/Defaults\";\nimport { Envelope } from \"./Envelope\";\nimport { Scale } from \"../../signal/Scale\";\nimport { Pow } from \"../../signal/Pow\";\nimport { assertRange } from \"../../core/util/Debug\";\n/**\n * FrequencyEnvelope is an [[Envelope]] which ramps between [[baseFrequency]]\n * and [[octaves]]. It can also have an optional [[exponent]] to adjust the curve\n * which it ramps.\n * @example\n * const oscillator = new Tone.Oscillator().toDestination().start();\n * const freqEnv = new Tone.FrequencyEnvelope({\n * \tattack: 0.2,\n * \tbaseFrequency: \"C2\",\n * \toctaves: 4\n * });\n * freqEnv.connect(oscillator.frequency);\n * freqEnv.triggerAttack();\n * @category Component\n */\n\nexport class FrequencyEnvelope extends Envelope {\n  constructor() {\n    super(optionsFromArguments(FrequencyEnvelope.getDefaults(), arguments, [\"attack\", \"decay\", \"sustain\", \"release\"]));\n    this.name = \"FrequencyEnvelope\";\n    const options = optionsFromArguments(FrequencyEnvelope.getDefaults(), arguments, [\"attack\", \"decay\", \"sustain\", \"release\"]);\n    this._octaves = options.octaves;\n    this._baseFrequency = this.toFrequency(options.baseFrequency);\n    this._exponent = this.input = new Pow({\n      context: this.context,\n      value: options.exponent\n    });\n    this._scale = this.output = new Scale({\n      context: this.context,\n      min: this._baseFrequency,\n      max: this._baseFrequency * Math.pow(2, this._octaves)\n    });\n\n    this._sig.chain(this._exponent, this._scale);\n  }\n\n  static getDefaults() {\n    return Object.assign(Envelope.getDefaults(), {\n      baseFrequency: 200,\n      exponent: 1,\n      octaves: 4\n    });\n  }\n  /**\n   * The envelope's minimum output value. This is the value which it\n   * starts at.\n   */\n\n\n  get baseFrequency() {\n    return this._baseFrequency;\n  }\n\n  set baseFrequency(min) {\n    const freq = this.toFrequency(min);\n    assertRange(freq, 0);\n    this._baseFrequency = freq;\n    this._scale.min = this._baseFrequency; // update the max value when the min changes\n\n    this.octaves = this._octaves;\n  }\n  /**\n   * The number of octaves above the baseFrequency that the\n   * envelope will scale to.\n   */\n\n\n  get octaves() {\n    return this._octaves;\n  }\n\n  set octaves(octaves) {\n    this._octaves = octaves;\n    this._scale.max = this._baseFrequency * Math.pow(2, octaves);\n  }\n  /**\n   * The envelope's exponent value.\n   */\n\n\n  get exponent() {\n    return this._exponent.value;\n  }\n\n  set exponent(exponent) {\n    this._exponent.value = exponent;\n  }\n  /**\n   * Clean up\n   */\n\n\n  dispose() {\n    super.dispose();\n\n    this._exponent.dispose();\n\n    this._scale.dispose();\n\n    return this;\n  }\n\n}","map":{"version":3,"mappings":"AAAA,SAASA,oBAAT,QAAqC,0BAArC;AAEA,SAASC,QAAT,QAA0C,YAA1C;AACA,SAASC,KAAT,QAAsB,oBAAtB;AACA,SAASC,GAAT,QAAoB,kBAApB;AACA,SAASC,WAAT,QAA4B,uBAA5B;AAOA;;;;;;;;;;;;;;;;AAeA,OAAM,MAAOC,iBAAP,SAAiCJ,QAAjC,CAAyC;EAgC9CK;IACC,MAAMN,oBAAoB,CAACK,iBAAiB,CAACE,WAAlB,EAAD,EAAkCC,SAAlC,EAA6C,CAAC,QAAD,EAAW,OAAX,EAAoB,SAApB,EAA+B,SAA/B,CAA7C,CAA1B;IA/BQ,YAAe,mBAAf;IAgCR,MAAMC,OAAO,GAAGT,oBAAoB,CAACK,iBAAiB,CAACE,WAAlB,EAAD,EAAkCC,SAAlC,EAA6C,CAAC,QAAD,EAAW,OAAX,EAAoB,SAApB,EAA+B,SAA/B,CAA7C,CAApC;IAEA,KAAKE,QAAL,GAAgBD,OAAO,CAACE,OAAxB;IACA,KAAKC,cAAL,GAAsB,KAAKC,WAAL,CAAiBJ,OAAO,CAACK,aAAzB,CAAtB;IAEA,KAAKC,SAAL,GAAiB,KAAKC,KAAL,GAAa,IAAIb,GAAJ,CAAQ;MACrCc,OAAO,EAAE,KAAKA,OADuB;MAErCC,KAAK,EAAET,OAAO,CAACU;IAFsB,CAAR,CAA9B;IAIA,KAAKC,MAAL,GAAc,KAAKC,MAAL,GAAc,IAAInB,KAAJ,CAAU;MACrCe,OAAO,EAAE,KAAKA,OADuB;MAErCK,GAAG,EAAE,KAAKV,cAF2B;MAGrCW,GAAG,EAAE,KAAKX,cAAL,GAAsBY,IAAI,CAACC,GAAL,CAAS,CAAT,EAAY,KAAKf,QAAjB;IAHU,CAAV,CAA5B;;IAKA,KAAKgB,IAAL,CAAUC,KAAV,CAAgB,KAAKZ,SAArB,EAAgC,KAAKK,MAArC;EACA;;EAEiB,OAAXb,WAAW;IACjB,OAAOqB,MAAM,CAACC,MAAP,CAAc5B,QAAQ,CAACM,WAAT,EAAd,EAAsC;MAC5CO,aAAa,EAAE,GAD6B;MAE5CK,QAAQ,EAAE,CAFkC;MAG5CR,OAAO,EAAE;IAHmC,CAAtC,CAAP;EAKA;EAED;;;;;;EAIiB,IAAbG,aAAa;IAChB,OAAO,KAAKF,cAAZ;EACA;;EACgB,IAAbE,aAAa,CAACQ,GAAD,EAAI;IACpB,MAAMQ,IAAI,GAAG,KAAKjB,WAAL,CAAiBS,GAAjB,CAAb;IACAlB,WAAW,CAAC0B,IAAD,EAAO,CAAP,CAAX;IACA,KAAKlB,cAAL,GAAsBkB,IAAtB;IACA,KAAKV,MAAL,CAAYE,GAAZ,GAAkB,KAAKV,cAAvB,CAJoB,CAKpB;;IACA,KAAKD,OAAL,GAAe,KAAKD,QAApB;EACA;EAED;;;;;;EAIW,IAAPC,OAAO;IACV,OAAO,KAAKD,QAAZ;EACA;;EACU,IAAPC,OAAO,CAACA,OAAD,EAAgB;IAC1B,KAAKD,QAAL,GAAgBC,OAAhB;IACA,KAAKS,MAAL,CAAYG,GAAZ,GAAkB,KAAKX,cAAL,GAAsBY,IAAI,CAACC,GAAL,CAAS,CAAT,EAAYd,OAAZ,CAAxC;EACA;EAED;;;;;EAGY,IAARQ,QAAQ;IACX,OAAO,KAAKJ,SAAL,CAAeG,KAAtB;EACA;;EACW,IAARC,QAAQ,CAACA,QAAD,EAAS;IACpB,KAAKJ,SAAL,CAAeG,KAAf,GAAuBC,QAAvB;EACA;EAED;;;;;EAGAY,OAAO;IACN,MAAMA,OAAN;;IACA,KAAKhB,SAAL,CAAegB,OAAf;;IACA,KAAKX,MAAL,CAAYW,OAAZ;;IACA,OAAO,IAAP;EACA;;AAzG6C","names":["optionsFromArguments","Envelope","Scale","Pow","assertRange","FrequencyEnvelope","constructor","getDefaults","arguments","options","_octaves","octaves","_baseFrequency","toFrequency","baseFrequency","_exponent","input","context","value","exponent","_scale","output","min","max","Math","pow","_sig","chain","Object","assign","freq","dispose"],"sourceRoot":"","sources":["../../../../Tone/component/envelope/FrequencyEnvelope.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"module"}