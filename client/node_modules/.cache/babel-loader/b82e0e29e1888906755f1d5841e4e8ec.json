{"ast":null,"code":"import \"../core/clock/Transport\";\nimport { ToneWithContext } from \"../core/context/ToneWithContext\";\nimport { TicksClass } from \"../core/type/Ticks\";\nimport { defaultArg, optionsFromArguments } from \"../core/util/Defaults\";\nimport { noOp } from \"../core/util/Interface\";\nimport { StateTimeline } from \"../core/util/StateTimeline\";\nimport { isBoolean, isNumber } from \"../core/util/TypeCheck\";\n/**\n * ToneEvent abstracts away this.context.transport.schedule and provides a schedulable\n * callback for a single or repeatable events along the timeline.\n *\n * @example\n * const synth = new Tone.PolySynth().toDestination();\n * const chordEvent = new Tone.ToneEvent(((time, chord) => {\n * \t// the chord as well as the exact time of the event\n * \t// are passed in as arguments to the callback function\n * \tsynth.triggerAttackRelease(chord, 0.5, time);\n * }), [\"D4\", \"E4\", \"F4\"]);\n * // start the chord at the beginning of the transport timeline\n * chordEvent.start();\n * // loop it every measure for 8 measures\n * chordEvent.loop = 8;\n * chordEvent.loopEnd = \"1m\";\n * @category Event\n */\n\nexport class ToneEvent extends ToneWithContext {\n  constructor() {\n    super(optionsFromArguments(ToneEvent.getDefaults(), arguments, [\"callback\", \"value\"]));\n    this.name = \"ToneEvent\";\n    /**\n     * Tracks the scheduled events\n     */\n\n    this._state = new StateTimeline(\"stopped\");\n    /**\n     * A delay time from when the event is scheduled to start\n     */\n\n    this._startOffset = 0;\n    const options = optionsFromArguments(ToneEvent.getDefaults(), arguments, [\"callback\", \"value\"]);\n    this._loop = options.loop;\n    this.callback = options.callback;\n    this.value = options.value;\n    this._loopStart = this.toTicks(options.loopStart);\n    this._loopEnd = this.toTicks(options.loopEnd);\n    this._playbackRate = options.playbackRate;\n    this._probability = options.probability;\n    this._humanize = options.humanize;\n    this.mute = options.mute;\n    this._playbackRate = options.playbackRate;\n    this._state.increasing = true; // schedule the events for the first time\n\n    this._rescheduleEvents();\n  }\n\n  static getDefaults() {\n    return Object.assign(ToneWithContext.getDefaults(), {\n      callback: noOp,\n      humanize: false,\n      loop: false,\n      loopEnd: \"1m\",\n      loopStart: 0,\n      mute: false,\n      playbackRate: 1,\n      probability: 1,\n      value: null\n    });\n  }\n  /**\n   * Reschedule all of the events along the timeline\n   * with the updated values.\n   * @param after Only reschedules events after the given time.\n   */\n\n\n  _rescheduleEvents() {\n    let after = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : -1;\n\n    // if no argument is given, schedules all of the events\n    this._state.forEachFrom(after, event => {\n      let duration;\n\n      if (event.state === \"started\") {\n        if (event.id !== -1) {\n          this.context.transport.clear(event.id);\n        }\n\n        const startTick = event.time + Math.round(this.startOffset / this._playbackRate);\n\n        if (this._loop === true || isNumber(this._loop) && this._loop > 1) {\n          duration = Infinity;\n\n          if (isNumber(this._loop)) {\n            duration = this._loop * this._getLoopDuration();\n          }\n\n          const nextEvent = this._state.getAfter(startTick);\n\n          if (nextEvent !== null) {\n            duration = Math.min(duration, nextEvent.time - startTick);\n          }\n\n          if (duration !== Infinity) {\n            // schedule a stop since it's finite duration\n            this._state.setStateAtTime(\"stopped\", startTick + duration + 1, {\n              id: -1\n            });\n\n            duration = new TicksClass(this.context, duration);\n          }\n\n          const interval = new TicksClass(this.context, this._getLoopDuration());\n          event.id = this.context.transport.scheduleRepeat(this._tick.bind(this), interval, new TicksClass(this.context, startTick), duration);\n        } else {\n          event.id = this.context.transport.schedule(this._tick.bind(this), new TicksClass(this.context, startTick));\n        }\n      }\n    });\n  }\n  /**\n   * Returns the playback state of the note, either \"started\" or \"stopped\".\n   */\n\n\n  get state() {\n    return this._state.getValueAtTime(this.context.transport.ticks);\n  }\n  /**\n   * The start from the scheduled start time.\n   */\n\n\n  get startOffset() {\n    return this._startOffset;\n  }\n\n  set startOffset(offset) {\n    this._startOffset = offset;\n  }\n  /**\n   * The probability of the notes being triggered.\n   */\n\n\n  get probability() {\n    return this._probability;\n  }\n\n  set probability(prob) {\n    this._probability = prob;\n  }\n  /**\n   * If set to true, will apply small random variation\n   * to the callback time. If the value is given as a time, it will randomize\n   * by that amount.\n   * @example\n   * const event = new Tone.ToneEvent();\n   * event.humanize = true;\n   */\n\n\n  get humanize() {\n    return this._humanize;\n  }\n\n  set humanize(variation) {\n    this._humanize = variation;\n  }\n  /**\n   * Start the note at the given time.\n   * @param  time  When the event should start.\n   */\n\n\n  start(time) {\n    const ticks = this.toTicks(time);\n\n    if (this._state.getValueAtTime(ticks) === \"stopped\") {\n      this._state.add({\n        id: -1,\n        state: \"started\",\n        time: ticks\n      });\n\n      this._rescheduleEvents(ticks);\n    }\n\n    return this;\n  }\n  /**\n   * Stop the Event at the given time.\n   * @param  time  When the event should stop.\n   */\n\n\n  stop(time) {\n    this.cancel(time);\n    const ticks = this.toTicks(time);\n\n    if (this._state.getValueAtTime(ticks) === \"started\") {\n      this._state.setStateAtTime(\"stopped\", ticks, {\n        id: -1\n      });\n\n      const previousEvent = this._state.getBefore(ticks);\n\n      let reschedulTime = ticks;\n\n      if (previousEvent !== null) {\n        reschedulTime = previousEvent.time;\n      }\n\n      this._rescheduleEvents(reschedulTime);\n    }\n\n    return this;\n  }\n  /**\n   * Cancel all scheduled events greater than or equal to the given time\n   * @param  time  The time after which events will be cancel.\n   */\n\n\n  cancel(time) {\n    time = defaultArg(time, -Infinity);\n    const ticks = this.toTicks(time);\n\n    this._state.forEachFrom(ticks, event => {\n      this.context.transport.clear(event.id);\n    });\n\n    this._state.cancel(ticks);\n\n    return this;\n  }\n  /**\n   * The callback function invoker. Also\n   * checks if the Event is done playing\n   * @param  time  The time of the event in seconds\n   */\n\n\n  _tick(time) {\n    const ticks = this.context.transport.getTicksAtTime(time);\n\n    if (!this.mute && this._state.getValueAtTime(ticks) === \"started\") {\n      if (this.probability < 1 && Math.random() > this.probability) {\n        return;\n      }\n\n      if (this.humanize) {\n        let variation = 0.02;\n\n        if (!isBoolean(this.humanize)) {\n          variation = this.toSeconds(this.humanize);\n        }\n\n        time += (Math.random() * 2 - 1) * variation;\n      }\n\n      this.callback(time, this.value);\n    }\n  }\n  /**\n   * Get the duration of the loop.\n   */\n\n\n  _getLoopDuration() {\n    return Math.round((this._loopEnd - this._loopStart) / this._playbackRate);\n  }\n  /**\n   * If the note should loop or not\n   * between ToneEvent.loopStart and\n   * ToneEvent.loopEnd. If set to true,\n   * the event will loop indefinitely,\n   * if set to a number greater than 1\n   * it will play a specific number of\n   * times, if set to false, 0 or 1, the\n   * part will only play once.\n   */\n\n\n  get loop() {\n    return this._loop;\n  }\n\n  set loop(loop) {\n    this._loop = loop;\n\n    this._rescheduleEvents();\n  }\n  /**\n   * The playback rate of the note. Defaults to 1.\n   * @example\n   * const note = new Tone.ToneEvent();\n   * note.loop = true;\n   * // repeat the note twice as fast\n   * note.playbackRate = 2;\n   */\n\n\n  get playbackRate() {\n    return this._playbackRate;\n  }\n\n  set playbackRate(rate) {\n    this._playbackRate = rate;\n\n    this._rescheduleEvents();\n  }\n  /**\n   * The loopEnd point is the time the event will loop\n   * if ToneEvent.loop is true.\n   */\n\n\n  get loopEnd() {\n    return new TicksClass(this.context, this._loopEnd).toSeconds();\n  }\n\n  set loopEnd(loopEnd) {\n    this._loopEnd = this.toTicks(loopEnd);\n\n    if (this._loop) {\n      this._rescheduleEvents();\n    }\n  }\n  /**\n   * The time when the loop should start.\n   */\n\n\n  get loopStart() {\n    return new TicksClass(this.context, this._loopStart).toSeconds();\n  }\n\n  set loopStart(loopStart) {\n    this._loopStart = this.toTicks(loopStart);\n\n    if (this._loop) {\n      this._rescheduleEvents();\n    }\n  }\n  /**\n   * The current progress of the loop interval.\n   * Returns 0 if the event is not started yet or\n   * it is not set to loop.\n   */\n\n\n  get progress() {\n    if (this._loop) {\n      const ticks = this.context.transport.ticks;\n\n      const lastEvent = this._state.get(ticks);\n\n      if (lastEvent !== null && lastEvent.state === \"started\") {\n        const loopDuration = this._getLoopDuration();\n\n        const progress = (ticks - lastEvent.time) % loopDuration;\n        return progress / loopDuration;\n      } else {\n        return 0;\n      }\n    } else {\n      return 0;\n    }\n  }\n\n  dispose() {\n    super.dispose();\n    this.cancel();\n\n    this._state.dispose();\n\n    return this;\n  }\n\n}","map":{"version":3,"mappings":"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","names":["ToneWithContext","TicksClass","defaultArg","optionsFromArguments","noOp","StateTimeline","isBoolean","isNumber","ToneEvent","constructor","getDefaults","arguments","options","_loop","loop","callback","value","_loopStart","toTicks","loopStart","_loopEnd","loopEnd","_playbackRate","playbackRate","_probability","probability","_humanize","humanize","mute","_state","increasing","_rescheduleEvents","Object","assign","after","forEachFrom","event","duration","state","id","context","transport","clear","startTick","time","Math","round","startOffset","Infinity","_getLoopDuration","nextEvent","getAfter","min","setStateAtTime","interval","scheduleRepeat","_tick","bind","schedule","getValueAtTime","ticks","_startOffset","offset","prob","variation","start","add","stop","cancel","previousEvent","getBefore","reschedulTime","getTicksAtTime","random","toSeconds","rate","progress","lastEvent","get","loopDuration","dispose"],"sourceRoot":"","sources":["../../../Tone/event/ToneEvent.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"module"}