{"ast":null,"code":"import { Gain } from \"../../core/context/Gain\";\nimport { ToneAudioNode } from \"../../core/context/ToneAudioNode\";\nimport { optionsFromArguments } from \"../../core/util/Defaults\";\nimport { readOnly, writable } from \"../../core/util/Interface\";\nimport { Signal } from \"../../signal/Signal\";\nimport { Filter } from \"../filter/Filter\";\n/**\n * Split the incoming signal into three bands (low, mid, high)\n * with two crossover frequency controls.\n * ```\n *            +----------------------+\n *          +-> input < lowFrequency +------------------> low\n *          | +----------------------+\n *          |\n *          | +--------------------------------------+\n * input ---+-> lowFrequency < input < highFrequency +--> mid\n *          | +--------------------------------------+\n *          |\n *          | +-----------------------+\n *          +-> highFrequency < input +-----------------> high\n *            +-----------------------+\n * ```\n * @category Component\n */\n\nexport class MultibandSplit extends ToneAudioNode {\n  constructor() {\n    super(optionsFromArguments(MultibandSplit.getDefaults(), arguments, [\"lowFrequency\", \"highFrequency\"]));\n    this.name = \"MultibandSplit\";\n    /**\n     * the input\n     */\n\n    this.input = new Gain({\n      context: this.context\n    });\n    /**\n     * no output node, use either low, mid or high outputs\n     */\n\n    this.output = undefined;\n    /**\n     * The low band.\n     */\n\n    this.low = new Filter({\n      context: this.context,\n      frequency: 0,\n      type: \"lowpass\"\n    });\n    /**\n     * the lower filter of the mid band\n     */\n\n    this._lowMidFilter = new Filter({\n      context: this.context,\n      frequency: 0,\n      type: \"highpass\"\n    });\n    /**\n     * The mid band output.\n     */\n\n    this.mid = new Filter({\n      context: this.context,\n      frequency: 0,\n      type: \"lowpass\"\n    });\n    /**\n     * The high band output.\n     */\n\n    this.high = new Filter({\n      context: this.context,\n      frequency: 0,\n      type: \"highpass\"\n    });\n    this._internalChannels = [this.low, this.mid, this.high];\n    const options = optionsFromArguments(MultibandSplit.getDefaults(), arguments, [\"lowFrequency\", \"highFrequency\"]);\n    this.lowFrequency = new Signal({\n      context: this.context,\n      units: \"frequency\",\n      value: options.lowFrequency\n    });\n    this.highFrequency = new Signal({\n      context: this.context,\n      units: \"frequency\",\n      value: options.highFrequency\n    });\n    this.Q = new Signal({\n      context: this.context,\n      units: \"positive\",\n      value: options.Q\n    });\n    this.input.fan(this.low, this.high);\n    this.input.chain(this._lowMidFilter, this.mid); // the frequency control signal\n\n    this.lowFrequency.fan(this.low.frequency, this._lowMidFilter.frequency);\n    this.highFrequency.fan(this.mid.frequency, this.high.frequency); // the Q value\n\n    this.Q.connect(this.low.Q);\n    this.Q.connect(this._lowMidFilter.Q);\n    this.Q.connect(this.mid.Q);\n    this.Q.connect(this.high.Q);\n    readOnly(this, [\"high\", \"mid\", \"low\", \"highFrequency\", \"lowFrequency\"]);\n  }\n\n  static getDefaults() {\n    return Object.assign(ToneAudioNode.getDefaults(), {\n      Q: 1,\n      highFrequency: 2500,\n      lowFrequency: 400\n    });\n  }\n  /**\n   * Clean up.\n   */\n\n\n  dispose() {\n    super.dispose();\n    writable(this, [\"high\", \"mid\", \"low\", \"highFrequency\", \"lowFrequency\"]);\n    this.low.dispose();\n\n    this._lowMidFilter.dispose();\n\n    this.mid.dispose();\n    this.high.dispose();\n    this.lowFrequency.dispose();\n    this.highFrequency.dispose();\n    this.Q.dispose();\n    return this;\n  }\n\n}","map":{"version":3,"mappings":"AAAA,SAASA,IAAT,QAAqB,yBAArB;AACA,SAASC,aAAT,QAAoD,kCAApD;AAEA,SAASC,oBAAT,QAAqC,0BAArC;AACA,SAASC,QAAT,EAAmBC,QAAnB,QAAmC,2BAAnC;AACA,SAASC,MAAT,QAAuB,qBAAvB;AACA,SAASC,MAAT,QAAuB,kBAAvB;AAQA;;;;;;;;;;;;;;;;;;;AAkBA,OAAM,MAAOC,cAAP,SAA8BN,aAA9B,CAAkE;EAyEvEO;IACC,MAAMN,oBAAoB,CAACK,cAAc,CAACE,WAAf,EAAD,EAA+BC,SAA/B,EAA0C,CAAC,cAAD,EAAiB,eAAjB,CAA1C,CAA1B;IAxEQ,YAAe,gBAAf;IAET;;;;IAGS,aAAQ,IAAIV,IAAJ,CAAS;MAAEW,OAAO,EAAE,KAAKA;IAAhB,CAAT,CAAR;IAET;;;;IAGS,cAASC,SAAT;IAET;;;;IAGS,WAAM,IAAIN,MAAJ,CAAW;MACzBK,OAAO,EAAE,KAAKA,OADW;MAEzBE,SAAS,EAAE,CAFc;MAGzBC,IAAI,EAAE;IAHmB,CAAX,CAAN;IAMT;;;;IAGQ,qBAAgB,IAAIR,MAAJ,CAAW;MAClCK,OAAO,EAAE,KAAKA,OADoB;MAElCE,SAAS,EAAE,CAFuB;MAGlCC,IAAI,EAAE;IAH4B,CAAX,CAAhB;IAMR;;;;IAGS,WAAM,IAAIR,MAAJ,CAAW;MACzBK,OAAO,EAAE,KAAKA,OADW;MAEzBE,SAAS,EAAE,CAFc;MAGzBC,IAAI,EAAE;IAHmB,CAAX,CAAN;IAMT;;;;IAGS,YAAO,IAAIR,MAAJ,CAAW;MAC1BK,OAAO,EAAE,KAAKA,OADY;MAE1BE,SAAS,EAAE,CAFe;MAG1BC,IAAI,EAAE;IAHoB,CAAX,CAAP;IAgBC,yBAAoB,CAAC,KAAKC,GAAN,EAAW,KAAKC,GAAhB,EAAqB,KAAKC,IAA1B,CAApB;IAeT,MAAMC,OAAO,GAAGhB,oBAAoB,CAACK,cAAc,CAACE,WAAf,EAAD,EAA+BC,SAA/B,EAA0C,CAAC,cAAD,EAAiB,eAAjB,CAA1C,CAApC;IAEA,KAAKS,YAAL,GAAoB,IAAId,MAAJ,CAAW;MAC9BM,OAAO,EAAE,KAAKA,OADgB;MAE9BS,KAAK,EAAE,WAFuB;MAG9BC,KAAK,EAAEH,OAAO,CAACC;IAHe,CAAX,CAApB;IAMA,KAAKG,aAAL,GAAqB,IAAIjB,MAAJ,CAAW;MAC/BM,OAAO,EAAE,KAAKA,OADiB;MAE/BS,KAAK,EAAE,WAFwB;MAG/BC,KAAK,EAAEH,OAAO,CAACI;IAHgB,CAAX,CAArB;IAMA,KAAKC,CAAL,GAAS,IAAIlB,MAAJ,CAAW;MACnBM,OAAO,EAAE,KAAKA,OADK;MAEnBS,KAAK,EAAE,UAFY;MAGnBC,KAAK,EAAEH,OAAO,CAACK;IAHI,CAAX,CAAT;IAMA,KAAKC,KAAL,CAAWC,GAAX,CAAe,KAAKV,GAApB,EAAyB,KAAKE,IAA9B;IACA,KAAKO,KAAL,CAAWE,KAAX,CAAiB,KAAKC,aAAtB,EAAqC,KAAKX,GAA1C,EAvBD,CAwBC;;IACA,KAAKG,YAAL,CAAkBM,GAAlB,CAAsB,KAAKV,GAAL,CAASF,SAA/B,EAA0C,KAAKc,aAAL,CAAmBd,SAA7D;IACA,KAAKS,aAAL,CAAmBG,GAAnB,CAAuB,KAAKT,GAAL,CAASH,SAAhC,EAA2C,KAAKI,IAAL,CAAUJ,SAArD,EA1BD,CA2BC;;IACA,KAAKU,CAAL,CAAOK,OAAP,CAAe,KAAKb,GAAL,CAASQ,CAAxB;IACA,KAAKA,CAAL,CAAOK,OAAP,CAAe,KAAKD,aAAL,CAAmBJ,CAAlC;IACA,KAAKA,CAAL,CAAOK,OAAP,CAAe,KAAKZ,GAAL,CAASO,CAAxB;IACA,KAAKA,CAAL,CAAOK,OAAP,CAAe,KAAKX,IAAL,CAAUM,CAAzB;IAEApB,QAAQ,CAAC,IAAD,EAAO,CAAC,MAAD,EAAS,KAAT,EAAgB,KAAhB,EAAuB,eAAvB,EAAwC,cAAxC,CAAP,CAAR;EACA;;EAEiB,OAAXM,WAAW;IACjB,OAAOoB,MAAM,CAACC,MAAP,CAAc7B,aAAa,CAACQ,WAAd,EAAd,EAA2C;MACjDc,CAAC,EAAE,CAD8C;MAEjDD,aAAa,EAAE,IAFkC;MAGjDH,YAAY,EAAE;IAHmC,CAA3C,CAAP;EAKA;EAED;;;;;EAGAY,OAAO;IACN,MAAMA,OAAN;IACA3B,QAAQ,CAAC,IAAD,EAAO,CAAC,MAAD,EAAS,KAAT,EAAgB,KAAhB,EAAuB,eAAvB,EAAwC,cAAxC,CAAP,CAAR;IACA,KAAKW,GAAL,CAASgB,OAAT;;IACA,KAAKJ,aAAL,CAAmBI,OAAnB;;IACA,KAAKf,GAAL,CAASe,OAAT;IACA,KAAKd,IAAL,CAAUc,OAAV;IACA,KAAKZ,YAAL,CAAkBY,OAAlB;IACA,KAAKT,aAAL,CAAmBS,OAAnB;IACA,KAAKR,CAAL,CAAOQ,OAAP;IACA,OAAO,IAAP;EACA;;AAnIsE","names":["Gain","ToneAudioNode","optionsFromArguments","readOnly","writable","Signal","Filter","MultibandSplit","constructor","getDefaults","arguments","context","undefined","frequency","type","low","mid","high","options","lowFrequency","units","value","highFrequency","Q","input","fan","chain","_lowMidFilter","connect","Object","assign","dispose"],"sourceRoot":"","sources":["../../../../Tone/component/channel/MultibandSplit.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"module"}