{"ast":null,"code":"var _jsxFileName = \"/Users/hadiramlaoui/Desktop/csc600/final-project-fullstacksquad/client/src/instruments/Drums.tsx\";\n// 3rd party library imports\nimport * as Tone from 'tone';\nimport classNames from 'classnames';\nimport { List } from 'immutable';\nimport React from 'react'; // project imports\n\nimport { MembraneInstrument } from '../DrumnIstrument'; //Drum components \n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport function DrumKey(_ref) {\n  let {\n    note,\n    synth,\n    index\n  } = _ref;\n\n  /**\n   * This React component corresponds to either a major or minor key in the Drums.\n   * See `DrumsKeyWithoutJSX` for the React component without JSX.\n   */\n  // colors for drums\n  const colors = ['#ba53c2', '#9c51bd', '#744caf', '#4d439c', '#33378a'];\n  return (\n    /*#__PURE__*/\n    // Observations:\n    // 1. The JSX refers to the HTML-looking syntax within TypeScript.\n    // 2. The JSX will be **transpiled** into the corresponding `React.createElement` library call.\n    // 3. The curly braces `{` and `}` should remind you of string interpolation.\n    _jsxDEV(\"div\", {\n      onMouseDown: () => synth === null || synth === void 0 ? void 0 : synth.triggerAttackRelease(`${note}`, '8n'),\n      className: classNames('pointer relative drum top'),\n      style: {\n        // CSS\n        // padding: 10,\n        // margin: 20,\n        // backgroundColor: '#D2B48C',\n        backgroundColor: colors[index],\n        display: \"inline-block\",\n        borderRadius: \"50%\",\n        width: 175 - index * 15,\n        height: 175 - index * 15,\n        marginLeft: index + 10,\n        marginRight: 5 - index // left: `${(index*12)}rem`,\n\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 9\n    }, this)\n  );\n} // eslint-disable-next-line\n\n_c = DrumKey;\n\nfunction DrumKeyWithoutJSX(_ref2) {\n  let {\n    note,\n    synth,\n    index\n  } = _ref2;\n\n  /**\n   * This React component for pedagogical purposes.\n   * See `PianoKey` for the React component with JSX (JavaScript XML).\n   */\n  return /*#__PURE__*/React.createElement('div', {\n    onMouseDown: () => synth === null || synth === void 0 ? void 0 : synth.triggerAttack(`${note}`),\n    onMouseUp: () => synth === null || synth === void 0 ? void 0 : synth.triggerRelease('+0.25')\n  }, []);\n}\n\n_c2 = DrumKeyWithoutJSX;\n\nfunction DrumType(_ref3) {\n  let {\n    title,\n    onClick,\n    active\n  } = _ref3;\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    onClick: onClick,\n    className: classNames('dim pointer ph3 pv2 ba mr1 br1 fw7 bw1 drum_oscillator_buttons', {\n      'white drum_oscillator_buttons_pressed': active,\n      'white b--none': !active\n    }),\n    children: title\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 81,\n    columnNumber: 5\n  }, this);\n}\n\n_c3 = DrumType;\n\nfunction Drums(_ref4) {\n  let {\n    synth,\n    setSynth\n  } = _ref4;\n  const keys = List([{\n    note: 'A1',\n    idx: 0\n  }, {\n    note: 'B1',\n    idx: 1\n  }, {\n    note: 'D2',\n    idx: 2\n  }, {\n    note: 'C2',\n    idx: 3\n  }, {\n    note: 'E2',\n    idx: 4\n  }]);\n\n  const setOscillator = newType => {\n    setSynth(oldSynth => {\n      oldSynth.disconnect();\n      return new Tone.MembraneSynth({\n        oscillator: {\n          type: newType\n        },\n        \"envelope\": {\n          \"attack\": 0.001,\n          \"decay\": 0.35,\n          \"sustain\": 0.01,\n          \"release\": 1.4\n        },\n        \"octaves\": 9,\n        \"pitchDecay\": 0.0005\n      }).toDestination();\n    });\n  };\n\n  const oscillators = List(['sine', 'sawtooth', 'square', 'triangle', 'fmsine', 'fmsawtooth', 'fmtriangle', 'amsine', 'amsawtooth', 'amtriangle']);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"pv4 pl2\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"relative dib h4 w-100 \",\n      children: keys.map(key => {\n        const note = `${key.note}`;\n        return /*#__PURE__*/_jsxDEV(DrumKey, {\n          //react key\n          note: note,\n          synth: synth,\n          index: key.idx,\n          octaves: 1,\n          pitchDecay: 0.0005\n        }, note, false, {\n          fileName: _jsxFileName,\n          lineNumber: 139,\n          columnNumber: 23\n        }, this);\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 135,\n      columnNumber: 11\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: 'pl2 pt4 flex mt3',\n      children: oscillators.map(o => /*#__PURE__*/_jsxDEV(DrumType, {\n        title: o,\n        onClick: () => setOscillator(o),\n        active: (synth === null || synth === void 0 ? void 0 : synth.oscillator.type) === o\n      }, o, false, {\n        fileName: _jsxFileName,\n        lineNumber: 153,\n        columnNumber: 19\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 151,\n      columnNumber: 11\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 134,\n    columnNumber: 7\n  }, this);\n}\n\n_c4 = Drums;\nexport const DrumsInstrument = new MembraneInstrument('Drums', Drums);\n\nvar _c, _c2, _c3, _c4;\n\n$RefreshReg$(_c, \"DrumKey\");\n$RefreshReg$(_c2, \"DrumKeyWithoutJSX\");\n$RefreshReg$(_c3, \"DrumType\");\n$RefreshReg$(_c4, \"Drums\");","map":{"version":3,"names":["Tone","classNames","List","React","MembraneInstrument","DrumKey","note","synth","index","colors","triggerAttackRelease","backgroundColor","display","borderRadius","width","height","marginLeft","marginRight","DrumKeyWithoutJSX","createElement","onMouseDown","triggerAttack","onMouseUp","triggerRelease","DrumType","title","onClick","active","Drums","setSynth","keys","idx","setOscillator","newType","oldSynth","disconnect","MembraneSynth","oscillator","type","toDestination","oscillators","map","key","o","DrumsInstrument"],"sources":["/Users/hadiramlaoui/Desktop/csc600/final-project-fullstacksquad/client/src/instruments/Drums.tsx"],"sourcesContent":["// 3rd party library imports\nimport * as Tone from 'tone';\nimport classNames from 'classnames';\nimport { List, Range } from 'immutable';\nimport React from 'react';\n\n// project imports\nimport { MembraneInstrument, InstrumentProps } from '../DrumnIstrument';\n\n//Drum components \ninterface DrumKeyProps {\n  note: string; \n  duration?: string;\n  synth?: Tone.MembraneSynth; // Contains library code for making sound\n  index: number; // give a location for the Drums key\n  octaves: number;\n  pitchDecay: number;\n}\n\nexport function DrumKey({\n  note,\n    synth,\n    index,\n}: DrumKeyProps): JSX.Element {\n    /**\n     * This React component corresponds to either a major or minor key in the Drums.\n     * See `DrumsKeyWithoutJSX` for the React component without JSX.\n     */\n\n    // colors for drums\n    const colors = ['#ba53c2', '#9c51bd', '#744caf', '#4d439c', '#33378a']\n\n    return (\n        // Observations:\n        // 1. The JSX refers to the HTML-looking syntax within TypeScript.\n        // 2. The JSX will be **transpiled** into the corresponding `React.createElement` library call.\n        // 3. The curly braces `{` and `}` should remind you of string interpolation.\n        <div\n            onMouseDown={() => synth?.triggerAttackRelease(`${note}`, '8n')}\n            className={classNames('pointer relative drum top')}\n            style={{\n                // CSS\n                // padding: 10,\n                // margin: 20,\n                // backgroundColor: '#D2B48C',\n                backgroundColor: colors[index],\n                display: \"inline-block\",\n                borderRadius: \"50%\",\n                width: 175-(index*15),\n                height: 175-(index*15),\n                marginLeft: (index)+10,\n                marginRight: 5-(index)\n                // left: `${(index*12)}rem`,\n                }}\n        ></div >\n    );\n}\n\n// eslint-disable-next-line\nfunction DrumKeyWithoutJSX({\n  note,\n  synth,\n  index,\n}: DrumKeyProps): JSX.Element {\n  /**\n   * This React component for pedagogical purposes.\n   * See `PianoKey` for the React component with JSX (JavaScript XML).\n   */\n  return React.createElement(\n    'div',\n    {\n      onMouseDown: () => synth?.triggerAttack(`${note}`),\n      onMouseUp: () => synth?.triggerRelease('+0.25'),\n    },\n    [],\n  );\n}\n\nfunction DrumType({ title, onClick, active }: any): JSX.Element {\n  return (\n    <div\n        onClick={onClick}\n        className={classNames('dim pointer ph3 pv2 ba mr1 br1 fw7 bw1 drum_oscillator_buttons', {\n            'white drum_oscillator_buttons_pressed': active,\n            'white b--none': !active,\n          })}\n    >\n        {title}\n    </div>\n);\n}\n\nfunction Drums({ synth, setSynth }: InstrumentProps): JSX.Element {\n  const keys = List([\n      { note: 'A1', idx: 0 },\n      { note: 'B1', idx: 1 },\n      { note: 'D2', idx: 2 },\n      { note: 'C2', idx: 3 },\n      { note: 'E2', idx: 4 }\n  ]);\n\n  const setOscillator = (newType: Tone.ToneOscillatorType) => {\n    setSynth(oldSynth => {\n        oldSynth.disconnect();\n\n        return new Tone.MembraneSynth({\n            oscillator: { type: newType } as Tone.OmniOscillatorOptions,\n            \"envelope\": {\n                \"attack\": 0.001,\n                \"decay\": 0.35,\n                \"sustain\": 0.01,\n                \"release\": 1.4,\n            },\n            \"octaves\": 9,\n            \"pitchDecay\": 0.0005,\n        }).toDestination();\n    });\n};\n\n    const oscillators: List<OscillatorType> = List([\n      'sine',\n      'sawtooth',\n      'square',\n      'triangle',\n      'fmsine',\n      'fmsawtooth',\n      'fmtriangle',\n      'amsine',\n      'amsawtooth',\n      'amtriangle',\n    ]) as List<OscillatorType>;\n\n    return (\n      <div className=\"pv4 pl2\">\n          <div className=\"relative dib h4 w-100 \">\n              {keys.map(key => {\n                  const note = `${key.note}`;\n                  return (\n                      <DrumKey\n                          key={note} //react key\n                          note={note}\n                          synth={synth}\n                          index={key.idx}\n                          octaves={1}\n                          pitchDecay={0.0005}\n                      />\n                  );\n              },\n              )}\n          </div>\n          <div className={'pl2 pt4 flex mt3'}>\n              {oscillators.map(o => (\n                  <DrumType\n                      key={o}\n                      title={o}\n                      onClick={() => setOscillator(o)}\n                      active={synth?.oscillator.type === o}\n                  />\n              ))}\n          </div>\n      </div>\n  );\n}\n\n  export const DrumsInstrument = new MembraneInstrument('Drums', Drums);\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}