{"ast":null,"code":"import { ToneAudioNode } from \"../../core/context/ToneAudioNode\";\nimport { Compressor } from \"./Compressor\";\nimport { optionsFromArguments } from \"../../core/util/Defaults\";\nimport { MidSideSplit } from \"../channel/MidSideSplit\";\nimport { MidSideMerge } from \"../channel/MidSideMerge\";\nimport { readOnly } from \"../../core/util/Interface\";\n/**\n * MidSideCompressor applies two different compressors to the [[mid]]\n * and [[side]] signal components of the input. See [[MidSideSplit]] and [[MidSideMerge]].\n * @category Component\n */\n\nexport class MidSideCompressor extends ToneAudioNode {\n  constructor() {\n    super(Object.assign(optionsFromArguments(MidSideCompressor.getDefaults(), arguments)));\n    this.name = \"MidSideCompressor\";\n    const options = optionsFromArguments(MidSideCompressor.getDefaults(), arguments);\n    this._midSideSplit = this.input = new MidSideSplit({\n      context: this.context\n    });\n    this._midSideMerge = this.output = new MidSideMerge({\n      context: this.context\n    });\n    this.mid = new Compressor(Object.assign(options.mid, {\n      context: this.context\n    }));\n    this.side = new Compressor(Object.assign(options.side, {\n      context: this.context\n    }));\n\n    this._midSideSplit.mid.chain(this.mid, this._midSideMerge.mid);\n\n    this._midSideSplit.side.chain(this.side, this._midSideMerge.side);\n\n    readOnly(this, [\"mid\", \"side\"]);\n  }\n\n  static getDefaults() {\n    return Object.assign(ToneAudioNode.getDefaults(), {\n      mid: {\n        ratio: 3,\n        threshold: -24,\n        release: 0.03,\n        attack: 0.02,\n        knee: 16\n      },\n      side: {\n        ratio: 6,\n        threshold: -30,\n        release: 0.25,\n        attack: 0.03,\n        knee: 10\n      }\n    });\n  }\n\n  dispose() {\n    super.dispose();\n    this.mid.dispose();\n    this.side.dispose();\n\n    this._midSideSplit.dispose();\n\n    this._midSideMerge.dispose();\n\n    return this;\n  }\n\n}","map":{"version":3,"mappings":"AAAA,SAAgCA,aAAhC,QAA2E,kCAA3E;AACA,SAASC,UAAT,QAA8C,cAA9C;AACA,SAASC,oBAAT,QAAqC,0BAArC;AACA,SAASC,YAAT,QAA6B,yBAA7B;AACA,SAASC,YAAT,QAA6B,yBAA7B;AACA,SAASC,QAAT,QAA2C,2BAA3C;AAOA;;;;;;AAKA,OAAM,MAAOC,iBAAP,SAAiCN,aAAjC,CAAwE;EA4B7EO;IACC,MAAMC,MAAM,CAACC,MAAP,CAAcP,oBAAoB,CAACI,iBAAiB,CAACI,WAAlB,EAAD,EAAkCC,SAAlC,CAAlC,CAAN;IA3BQ,YAAe,mBAAf;IA4BR,MAAMC,OAAO,GAAGV,oBAAoB,CAACI,iBAAiB,CAACI,WAAlB,EAAD,EAAkCC,SAAlC,CAApC;IAEA,KAAKE,aAAL,GAAqB,KAAKC,KAAL,GAAa,IAAIX,YAAJ,CAAiB;MAAEY,OAAO,EAAE,KAAKA;IAAhB,CAAjB,CAAlC;IACA,KAAKC,aAAL,GAAqB,KAAKC,MAAL,GAAc,IAAIb,YAAJ,CAAiB;MAAEW,OAAO,EAAE,KAAKA;IAAhB,CAAjB,CAAnC;IACA,KAAKG,GAAL,GAAW,IAAIjB,UAAJ,CAAeO,MAAM,CAACC,MAAP,CAAcG,OAAO,CAACM,GAAtB,EAA2B;MAAEH,OAAO,EAAE,KAAKA;IAAhB,CAA3B,CAAf,CAAX;IACA,KAAKI,IAAL,GAAY,IAAIlB,UAAJ,CAAeO,MAAM,CAACC,MAAP,CAAcG,OAAO,CAACO,IAAtB,EAA4B;MAAEJ,OAAO,EAAE,KAAKA;IAAhB,CAA5B,CAAf,CAAZ;;IAEA,KAAKF,aAAL,CAAmBK,GAAnB,CAAuBE,KAAvB,CAA6B,KAAKF,GAAlC,EAAuC,KAAKF,aAAL,CAAmBE,GAA1D;;IACA,KAAKL,aAAL,CAAmBM,IAAnB,CAAwBC,KAAxB,CAA8B,KAAKD,IAAnC,EAAyC,KAAKH,aAAL,CAAmBG,IAA5D;;IACAd,QAAQ,CAAC,IAAD,EAAO,CAAC,KAAD,EAAQ,MAAR,CAAP,CAAR;EACA;;EAEiB,OAAXK,WAAW;IACjB,OAAOF,MAAM,CAACC,MAAP,CAAcT,aAAa,CAACU,WAAd,EAAd,EAA2C;MACjDQ,GAAG,EAAE;QACJG,KAAK,EAAE,CADH;QAEJC,SAAS,EAAE,CAAC,EAFR;QAGJC,OAAO,EAAE,IAHL;QAIJC,MAAM,EAAE,IAJJ;QAKJC,IAAI,EAAE;MALF,CAD4C;MAQjDN,IAAI,EAAE;QACLE,KAAK,EAAE,CADF;QAELC,SAAS,EAAE,CAAC,EAFP;QAGLC,OAAO,EAAE,IAHJ;QAILC,MAAM,EAAE,IAJH;QAKLC,IAAI,EAAE;MALD;IAR2C,CAA3C,CAAP;EAgBA;;EAEDC,OAAO;IACN,MAAMA,OAAN;IACA,KAAKR,GAAL,CAASQ,OAAT;IACA,KAAKP,IAAL,CAAUO,OAAV;;IACA,KAAKb,aAAL,CAAmBa,OAAnB;;IACA,KAAKV,aAAL,CAAmBU,OAAnB;;IACA,OAAO,IAAP;EACA;;AApE4E","names":["ToneAudioNode","Compressor","optionsFromArguments","MidSideSplit","MidSideMerge","readOnly","MidSideCompressor","constructor","Object","assign","getDefaults","arguments","options","_midSideSplit","input","context","_midSideMerge","output","mid","side","chain","ratio","threshold","release","attack","knee","dispose"],"sourceRoot":"","sources":["../../../../Tone/component/dynamics/MidSideCompressor.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"module"}