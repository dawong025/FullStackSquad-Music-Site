{"ast":null,"code":"import { LowpassCombFilter } from \"../component/filter/LowpassCombFilter\";\nimport { deepMerge } from \"../core/util/Defaults\";\nimport { optionsFromArguments } from \"../core/util/Defaults\";\nimport { Noise } from \"../source/Noise\";\nimport { Instrument } from \"./Instrument\";\n/**\n * Karplus-String string synthesis.\n * @example\n * const plucky = new Tone.PluckSynth().toDestination();\n * plucky.triggerAttack(\"C4\", \"+0.5\");\n * plucky.triggerAttack(\"C3\", \"+1\");\n * plucky.triggerAttack(\"C2\", \"+1.5\");\n * plucky.triggerAttack(\"C1\", \"+2\");\n * @category Instrument\n */\n\nexport class PluckSynth extends Instrument {\n  constructor() {\n    super(optionsFromArguments(PluckSynth.getDefaults(), arguments));\n    this.name = \"PluckSynth\";\n    const options = optionsFromArguments(PluckSynth.getDefaults(), arguments);\n    this._noise = new Noise({\n      context: this.context,\n      type: \"pink\"\n    });\n    this.attackNoise = options.attackNoise;\n    this._lfcf = new LowpassCombFilter({\n      context: this.context,\n      dampening: options.dampening,\n      resonance: options.resonance\n    });\n    this.resonance = options.resonance;\n    this.release = options.release;\n\n    this._noise.connect(this._lfcf);\n\n    this._lfcf.connect(this.output);\n  }\n\n  static getDefaults() {\n    return deepMerge(Instrument.getDefaults(), {\n      attackNoise: 1,\n      dampening: 4000,\n      resonance: 0.7,\n      release: 1\n    });\n  }\n  /**\n   * The dampening control. i.e. the lowpass filter frequency of the comb filter\n   * @min 0\n   * @max 7000\n   */\n\n\n  get dampening() {\n    return this._lfcf.dampening;\n  }\n\n  set dampening(fq) {\n    this._lfcf.dampening = fq;\n  }\n\n  triggerAttack(note, time) {\n    const freq = this.toFrequency(note);\n    time = this.toSeconds(time);\n    const delayAmount = 1 / freq;\n\n    this._lfcf.delayTime.setValueAtTime(delayAmount, time);\n\n    this._noise.start(time);\n\n    this._noise.stop(time + delayAmount * this.attackNoise);\n\n    this._lfcf.resonance.cancelScheduledValues(time);\n\n    this._lfcf.resonance.setValueAtTime(this.resonance, time);\n\n    return this;\n  }\n  /**\n   * Ramp down the [[resonance]] to 0 over the duration of the release time.\n   */\n\n\n  triggerRelease(time) {\n    this._lfcf.resonance.linearRampTo(0, this.release, time);\n\n    return this;\n  }\n\n  dispose() {\n    super.dispose();\n\n    this._noise.dispose();\n\n    this._lfcf.dispose();\n\n    return this;\n  }\n\n}","map":{"version":3,"mappings":"AACA,SAASA,iBAAT,QAAkC,uCAAlC;AACA,SAASC,SAAT,QAA0B,uBAA1B;AACA,SAASC,oBAAT,QAAqC,uBAArC;AAEA,SAASC,KAAT,QAAsB,iBAAtB;AACA,SAASC,UAAT,QAA8C,cAA9C;AASA;;;;;;;;;;;AAUA,OAAM,MAAOC,UAAP,SAA0BD,UAA1B,CAAuD;EA6B5DE;IAEC,MAAMJ,oBAAoB,CAACG,UAAU,CAACE,WAAX,EAAD,EAA2BC,SAA3B,CAA1B;IA7BQ,YAAO,YAAP;IA8BR,MAAMC,OAAO,GAAGP,oBAAoB,CAACG,UAAU,CAACE,WAAX,EAAD,EAA2BC,SAA3B,CAApC;IAEA,KAAKE,MAAL,GAAc,IAAIP,KAAJ,CAAU;MACvBQ,OAAO,EAAE,KAAKA,OADS;MAEvBC,IAAI,EAAE;IAFiB,CAAV,CAAd;IAKA,KAAKC,WAAL,GAAmBJ,OAAO,CAACI,WAA3B;IAEA,KAAKC,KAAL,GAAa,IAAId,iBAAJ,CAAsB;MAClCW,OAAO,EAAE,KAAKA,OADoB;MAElCI,SAAS,EAAEN,OAAO,CAACM,SAFe;MAGlCC,SAAS,EAAEP,OAAO,CAACO;IAHe,CAAtB,CAAb;IAMA,KAAKA,SAAL,GAAiBP,OAAO,CAACO,SAAzB;IACA,KAAKC,OAAL,GAAeR,OAAO,CAACQ,OAAvB;;IAEA,KAAKP,MAAL,CAAYQ,OAAZ,CAAoB,KAAKJ,KAAzB;;IACA,KAAKA,KAAL,CAAWI,OAAX,CAAmB,KAAKC,MAAxB;EACA;;EAEiB,OAAXZ,WAAW;IACjB,OAAON,SAAS,CAACG,UAAU,CAACG,WAAX,EAAD,EAA2B;MAC1CM,WAAW,EAAE,CAD6B;MAE1CE,SAAS,EAAE,IAF+B;MAG1CC,SAAS,EAAE,GAH+B;MAI1CC,OAAO,EAAE;IAJiC,CAA3B,CAAhB;EAMA;EAED;;;;;;;EAKa,IAATF,SAAS;IACZ,OAAO,KAAKD,KAAL,CAAWC,SAAlB;EACA;;EACY,IAATA,SAAS,CAACK,EAAD,EAAG;IACf,KAAKN,KAAL,CAAWC,SAAX,GAAuBK,EAAvB;EACA;;EAEDC,aAAa,CAACC,IAAD,EAAkBC,IAAlB,EAA6B;IACzC,MAAMC,IAAI,GAAG,KAAKC,WAAL,CAAiBH,IAAjB,CAAb;IACAC,IAAI,GAAG,KAAKG,SAAL,CAAeH,IAAf,CAAP;IACA,MAAMI,WAAW,GAAG,IAAIH,IAAxB;;IACA,KAAKV,KAAL,CAAWc,SAAX,CAAqBC,cAArB,CAAoCF,WAApC,EAAiDJ,IAAjD;;IACA,KAAKb,MAAL,CAAYoB,KAAZ,CAAkBP,IAAlB;;IACA,KAAKb,MAAL,CAAYqB,IAAZ,CAAiBR,IAAI,GAAGI,WAAW,GAAG,KAAKd,WAA3C;;IACA,KAAKC,KAAL,CAAWE,SAAX,CAAqBgB,qBAArB,CAA2CT,IAA3C;;IACA,KAAKT,KAAL,CAAWE,SAAX,CAAqBa,cAArB,CAAoC,KAAKb,SAAzC,EAAoDO,IAApD;;IACA,OAAO,IAAP;EACA;EAED;;;;;EAGAU,cAAc,CAACV,IAAD,EAAY;IACzB,KAAKT,KAAL,CAAWE,SAAX,CAAqBkB,YAArB,CAAkC,CAAlC,EAAqC,KAAKjB,OAA1C,EAAmDM,IAAnD;;IACA,OAAO,IAAP;EACA;;EAEDY,OAAO;IACN,MAAMA,OAAN;;IACA,KAAKzB,MAAL,CAAYyB,OAAZ;;IACA,KAAKrB,KAAL,CAAWqB,OAAX;;IACA,OAAO,IAAP;EACA;;AApG2D","names":["LowpassCombFilter","deepMerge","optionsFromArguments","Noise","Instrument","PluckSynth","constructor","getDefaults","arguments","options","_noise","context","type","attackNoise","_lfcf","dampening","resonance","release","connect","output","fq","triggerAttack","note","time","freq","toFrequency","toSeconds","delayAmount","delayTime","setValueAtTime","start","stop","cancelScheduledValues","triggerRelease","linearRampTo","dispose"],"sourceRoot":"","sources":["../../../Tone/instrument/PluckSynth.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"module"}