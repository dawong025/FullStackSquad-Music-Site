{"ast":null,"code":"import { Gain } from \"../../core/context/Gain\";\nimport { ToneAudioNode } from \"../../core/context/ToneAudioNode\";\nimport { optionsFromArguments } from \"../../core/util/Defaults\";\nimport { readOnly, writable } from \"../../core/util/Interface\";\nimport { MultibandSplit } from \"../channel/MultibandSplit\";\n/**\n * EQ3 provides 3 equalizer bins: Low/Mid/High.\n * @category Component\n */\n\nexport class EQ3 extends ToneAudioNode {\n  constructor() {\n    super(optionsFromArguments(EQ3.getDefaults(), arguments, [\"low\", \"mid\", \"high\"]));\n    this.name = \"EQ3\";\n    /**\n     * the output\n     */\n\n    this.output = new Gain({\n      context: this.context\n    });\n    this._internalChannels = [];\n    const options = optionsFromArguments(EQ3.getDefaults(), arguments, [\"low\", \"mid\", \"high\"]);\n    this.input = this._multibandSplit = new MultibandSplit({\n      context: this.context,\n      highFrequency: options.highFrequency,\n      lowFrequency: options.lowFrequency\n    });\n    this._lowGain = new Gain({\n      context: this.context,\n      gain: options.low,\n      units: \"decibels\"\n    });\n    this._midGain = new Gain({\n      context: this.context,\n      gain: options.mid,\n      units: \"decibels\"\n    });\n    this._highGain = new Gain({\n      context: this.context,\n      gain: options.high,\n      units: \"decibels\"\n    });\n    this.low = this._lowGain.gain;\n    this.mid = this._midGain.gain;\n    this.high = this._highGain.gain;\n    this.Q = this._multibandSplit.Q;\n    this.lowFrequency = this._multibandSplit.lowFrequency;\n    this.highFrequency = this._multibandSplit.highFrequency; // the frequency bands\n\n    this._multibandSplit.low.chain(this._lowGain, this.output);\n\n    this._multibandSplit.mid.chain(this._midGain, this.output);\n\n    this._multibandSplit.high.chain(this._highGain, this.output);\n\n    readOnly(this, [\"low\", \"mid\", \"high\", \"lowFrequency\", \"highFrequency\"]);\n    this._internalChannels = [this._multibandSplit];\n  }\n\n  static getDefaults() {\n    return Object.assign(ToneAudioNode.getDefaults(), {\n      high: 0,\n      highFrequency: 2500,\n      low: 0,\n      lowFrequency: 400,\n      mid: 0\n    });\n  }\n  /**\n   * Clean up.\n   */\n\n\n  dispose() {\n    super.dispose();\n    writable(this, [\"low\", \"mid\", \"high\", \"lowFrequency\", \"highFrequency\"]);\n\n    this._multibandSplit.dispose();\n\n    this.lowFrequency.dispose();\n    this.highFrequency.dispose();\n\n    this._lowGain.dispose();\n\n    this._midGain.dispose();\n\n    this._highGain.dispose();\n\n    this.low.dispose();\n    this.mid.dispose();\n    this.high.dispose();\n    this.Q.dispose();\n    return this;\n  }\n\n}","map":{"version":3,"mappings":"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","names":["Gain","ToneAudioNode","optionsFromArguments","readOnly","writable","MultibandSplit","EQ3","constructor","getDefaults","arguments","context","options","input","_multibandSplit","highFrequency","lowFrequency","_lowGain","gain","low","units","_midGain","mid","_highGain","high","Q","chain","output","_internalChannels","Object","assign","dispose"],"sourceRoot":"","sources":["../../../../Tone/component/filter/EQ3.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"module"}