{"ast":null,"code":"import { gainToDb } from \"../../core/type/Conversions\";\nimport { optionsFromArguments } from \"../../core/util/Defaults\";\nimport { MeterBase } from \"./MeterBase\";\nimport { warn } from \"../../core/util/Debug\";\nimport { Analyser } from \"./Analyser\";\n/**\n * Meter gets the [RMS](https://en.wikipedia.org/wiki/Root_mean_square)\n * of an input signal. It can also get the raw value of the input signal.\n *\n * @example\n * const meter = new Tone.Meter();\n * const mic = new Tone.UserMedia();\n * mic.open();\n * // connect mic to the meter\n * mic.connect(meter);\n * // the current level of the mic\n * setInterval(() => console.log(meter.getValue()), 100);\n * @category Component\n */\n\nexport class Meter extends MeterBase {\n  constructor() {\n    super(optionsFromArguments(Meter.getDefaults(), arguments, [\"smoothing\"]));\n    this.name = \"Meter\";\n    /**\n     * The previous frame's value\n     */\n\n    this._rms = 0;\n    const options = optionsFromArguments(Meter.getDefaults(), arguments, [\"smoothing\"]);\n    this.input = this.output = this._analyser = new Analyser({\n      context: this.context,\n      size: 256,\n      type: \"waveform\",\n      channels: options.channels\n    });\n    this.smoothing = options.smoothing, this.normalRange = options.normalRange;\n  }\n\n  static getDefaults() {\n    return Object.assign(MeterBase.getDefaults(), {\n      smoothing: 0.8,\n      normalRange: false,\n      channels: 1\n    });\n  }\n  /**\n   * Use [[getValue]] instead. For the previous getValue behavior, use DCMeter.\n   * @deprecated\n   */\n\n\n  getLevel() {\n    warn(\"'getLevel' has been changed to 'getValue'\");\n    return this.getValue();\n  }\n  /**\n   * Get the current value of the incoming signal.\n   * Output is in decibels when [[normalRange]] is `false`.\n   * If [[channels]] = 1, then the output is a single number\n   * representing the value of the input signal. When [[channels]] > 1,\n   * then each channel is returned as a value in a number array.\n   */\n\n\n  getValue() {\n    const aValues = this._analyser.getValue();\n\n    const channelValues = this.channels === 1 ? [aValues] : aValues;\n    const vals = channelValues.map(values => {\n      const totalSquared = values.reduce((total, current) => total + current * current, 0);\n      const rms = Math.sqrt(totalSquared / values.length); // the rms can only fall at the rate of the smoothing\n      // but can jump up instantly\n\n      this._rms = Math.max(rms, this._rms * this.smoothing);\n      return this.normalRange ? this._rms : gainToDb(this._rms);\n    });\n\n    if (this.channels === 1) {\n      return vals[0];\n    } else {\n      return vals;\n    }\n  }\n  /**\n   * The number of channels of analysis.\n   */\n\n\n  get channels() {\n    return this._analyser.channels;\n  }\n\n  dispose() {\n    super.dispose();\n\n    this._analyser.dispose();\n\n    return this;\n  }\n\n}","map":{"version":3,"mappings":"AAAA,SAASA,QAAT,QAAyB,6BAAzB;AAEA,SAASC,oBAAT,QAAqC,0BAArC;AACA,SAASC,SAAT,QAA4C,aAA5C;AACA,SAASC,IAAT,QAAqB,uBAArB;AACA,SAASC,QAAT,QAAyB,YAAzB;AAQA;;;;;;;;;;;;;;;AAcA,OAAM,MAAOC,KAAP,SAAqBH,SAArB,CAA4C;EA0BjDI;IACC,MAAML,oBAAoB,CAACI,KAAK,CAACE,WAAN,EAAD,EAAsBC,SAAtB,EAAiC,CAAC,WAAD,CAAjC,CAA1B;IAzBQ,YAAe,OAAf;IAcT;;;;IAGQ,YAAO,CAAP;IASP,MAAMC,OAAO,GAAGR,oBAAoB,CAACI,KAAK,CAACE,WAAN,EAAD,EAAsBC,SAAtB,EAAiC,CAAC,WAAD,CAAjC,CAApC;IAEA,KAAKE,KAAL,GAAa,KAAKC,MAAL,GAAc,KAAKC,SAAL,GAAiB,IAAIR,QAAJ,CAAa;MACxDS,OAAO,EAAE,KAAKA,OAD0C;MAExDC,IAAI,EAAE,GAFkD;MAGxDC,IAAI,EAAE,UAHkD;MAIxDC,QAAQ,EAAEP,OAAO,CAACO;IAJsC,CAAb,CAA5C;IAOA,KAAKC,SAAL,GAAiBR,OAAO,CAACQ,SAAzB,EACA,KAAKC,WAAL,GAAmBT,OAAO,CAACS,WAD3B;EAEA;;EAEiB,OAAXX,WAAW;IACjB,OAAOY,MAAM,CAACC,MAAP,CAAclB,SAAS,CAACK,WAAV,EAAd,EAAuC;MAC7CU,SAAS,EAAE,GADkC;MAE7CC,WAAW,EAAE,KAFgC;MAG7CF,QAAQ,EAAE;IAHmC,CAAvC,CAAP;EAKA;EAED;;;;;;EAIAK,QAAQ;IACPlB,IAAI,CAAC,2CAAD,CAAJ;IACA,OAAO,KAAKmB,QAAL,EAAP;EACA;EAED;;;;;;;;;EAOAA,QAAQ;IACP,MAAMC,OAAO,GAAG,KAAKX,SAAL,CAAeU,QAAf,EAAhB;;IACA,MAAME,aAAa,GAAG,KAAKR,QAAL,KAAkB,CAAlB,GAAsB,CAACO,OAAD,CAAtB,GAAkDA,OAAxE;IACA,MAAME,IAAI,GAAGD,aAAa,CAACE,GAAd,CAAkBC,MAAM,IAAG;MACvC,MAAMC,YAAY,GAAGD,MAAM,CAACE,MAAP,CAAc,CAACC,KAAD,EAAQC,OAAR,KAAoBD,KAAK,GAAGC,OAAO,GAAGA,OAApD,EAA6D,CAA7D,CAArB;MACA,MAAMC,GAAG,GAAGC,IAAI,CAACC,IAAL,CAAUN,YAAY,GAAGD,MAAM,CAACQ,MAAhC,CAAZ,CAFuC,CAGvC;MACA;;MACA,KAAKC,IAAL,GAAYH,IAAI,CAACI,GAAL,CAASL,GAAT,EAAc,KAAKI,IAAL,GAAY,KAAKnB,SAA/B,CAAZ;MACA,OAAO,KAAKC,WAAL,GAAmB,KAAKkB,IAAxB,GAA+BpC,QAAQ,CAAC,KAAKoC,IAAN,CAA9C;IACA,CAPY,CAAb;;IAQA,IAAI,KAAKpB,QAAL,KAAkB,CAAtB,EAAyB;MACxB,OAAOS,IAAI,CAAC,CAAD,CAAX;IACA,CAFD,MAEO;MACN,OAAOA,IAAP;IACA;EACD;EAED;;;;;EAGY,IAART,QAAQ;IACX,OAAO,KAAKJ,SAAL,CAAeI,QAAtB;EACA;;EAEDsB,OAAO;IACN,MAAMA,OAAN;;IACA,KAAK1B,SAAL,CAAe0B,OAAf;;IACA,OAAO,IAAP;EACA;;AA9FgD","names":["gainToDb","optionsFromArguments","MeterBase","warn","Analyser","Meter","constructor","getDefaults","arguments","options","input","output","_analyser","context","size","type","channels","smoothing","normalRange","Object","assign","getLevel","getValue","aValues","channelValues","vals","map","values","totalSquared","reduce","total","current","rms","Math","sqrt","length","_rms","max","dispose"],"sourceRoot":"","sources":["../../../../Tone/component/analysis/Meter.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"module"}