{"ast":null,"code":"import { Gain } from \"../../core/context/Gain\";\nimport { Param } from \"../../core/context/Param\";\nimport { connectSeries, ToneAudioNode } from \"../../core/context/ToneAudioNode\";\nimport { optionsFromArguments } from \"../../core/util/Defaults\";\nimport { readOnly } from \"../../core/util/Interface\";\nimport { ToneAudioWorklet } from \"../../core/worklet/ToneAudioWorklet\";\nimport { workletName } from \"./FeedbackCombFilter.worklet\";\n/**\n * Comb filters are basic building blocks for physical modeling. Read more\n * about comb filters on [CCRMA's website](https://ccrma.stanford.edu/~jos/pasp/Feedback_Comb_Filters.html).\n *\n * This comb filter is implemented with the AudioWorkletNode which allows it to have feedback delays less than the\n * Web Audio processing block of 128 samples. There is a polyfill for browsers that don't yet support the\n * AudioWorkletNode, but it will add some latency and have slower performance than the AudioWorkletNode.\n * @category Component\n */\n\nexport class FeedbackCombFilter extends ToneAudioWorklet {\n  constructor() {\n    super(optionsFromArguments(FeedbackCombFilter.getDefaults(), arguments, [\"delayTime\", \"resonance\"]));\n    this.name = \"FeedbackCombFilter\";\n    const options = optionsFromArguments(FeedbackCombFilter.getDefaults(), arguments, [\"delayTime\", \"resonance\"]);\n    this.input = new Gain({\n      context: this.context\n    });\n    this.output = new Gain({\n      context: this.context\n    });\n    this.delayTime = new Param({\n      context: this.context,\n      value: options.delayTime,\n      units: \"time\",\n      minValue: 0,\n      maxValue: 1,\n      param: this._dummyParam,\n      swappable: true\n    });\n    this.resonance = new Param({\n      context: this.context,\n      value: options.resonance,\n      units: \"normalRange\",\n      param: this._dummyParam,\n      swappable: true\n    });\n    readOnly(this, [\"resonance\", \"delayTime\"]);\n  }\n\n  _audioWorkletName() {\n    return workletName;\n  }\n  /**\n   * The default parameters\n   */\n\n\n  static getDefaults() {\n    return Object.assign(ToneAudioNode.getDefaults(), {\n      delayTime: 0.1,\n      resonance: 0.5\n    });\n  }\n\n  onReady(node) {\n    connectSeries(this.input, node, this.output);\n    const delayTime = node.parameters.get(\"delayTime\");\n    ;\n    this.delayTime.setParam(delayTime);\n    const feedback = node.parameters.get(\"feedback\");\n    ;\n    this.resonance.setParam(feedback);\n  }\n\n  dispose() {\n    super.dispose();\n    this.input.dispose();\n    this.output.dispose();\n    this.delayTime.dispose();\n    this.resonance.dispose();\n    return this;\n  }\n\n}","map":{"version":3,"mappings":"AAAA,SAASA,IAAT,QAAqB,yBAArB;AACA,SAASC,KAAT,QAAsB,0BAAtB;AACA,SAASC,aAAT,EAAwBC,aAAxB,QAAmE,kCAAnE;AAEA,SAASC,oBAAT,QAAqC,0BAArC;AACA,SAASC,QAAT,QAA2C,2BAA3C;AACA,SAASC,gBAAT,QAAiC,qCAAjC;AACA,SAASC,WAAT,QAA4B,8BAA5B;AAOA;;;;;;;;;;AASA,OAAM,MAAOC,kBAAP,SAAkCF,gBAAlC,CAA6E;EAuBlFG;IACC,MAAML,oBAAoB,CAACI,kBAAkB,CAACE,WAAnB,EAAD,EAAmCC,SAAnC,EAA8C,CAAC,WAAD,EAAc,WAAd,CAA9C,CAA1B;IAtBQ,YAAO,oBAAP;IAuBR,MAAMC,OAAO,GAAGR,oBAAoB,CAACI,kBAAkB,CAACE,WAAnB,EAAD,EAAmCC,SAAnC,EAA8C,CAAC,WAAD,EAAc,WAAd,CAA9C,CAApC;IAEA,KAAKE,KAAL,GAAa,IAAIb,IAAJ,CAAS;MAAEc,OAAO,EAAE,KAAKA;IAAhB,CAAT,CAAb;IACA,KAAKC,MAAL,GAAc,IAAIf,IAAJ,CAAS;MAAEc,OAAO,EAAE,KAAKA;IAAhB,CAAT,CAAd;IAEA,KAAKE,SAAL,GAAiB,IAAIf,KAAJ,CAAkB;MAClCa,OAAO,EAAE,KAAKA,OADoB;MAElCG,KAAK,EAAEL,OAAO,CAACI,SAFmB;MAGlCE,KAAK,EAAE,MAH2B;MAIlCC,QAAQ,EAAE,CAJwB;MAKlCC,QAAQ,EAAE,CALwB;MAMlCC,KAAK,EAAE,KAAKC,WANsB;MAOlCC,SAAS,EAAE;IAPuB,CAAlB,CAAjB;IAUA,KAAKC,SAAL,GAAiB,IAAIvB,KAAJ,CAAyB;MACzCa,OAAO,EAAE,KAAKA,OAD2B;MAEzCG,KAAK,EAAEL,OAAO,CAACY,SAF0B;MAGzCN,KAAK,EAAE,aAHkC;MAIzCG,KAAK,EAAE,KAAKC,WAJ6B;MAKzCC,SAAS,EAAE;IAL8B,CAAzB,CAAjB;IAQAlB,QAAQ,CAAC,IAAD,EAAO,CAAC,WAAD,EAAc,WAAd,CAAP,CAAR;EACA;;EAESoB,iBAAiB;IAC1B,OAAOlB,WAAP;EACA;EAED;;;;;EAGkB,OAAXG,WAAW;IACjB,OAAOgB,MAAM,CAACC,MAAP,CAAcxB,aAAa,CAACO,WAAd,EAAd,EAA2C;MACjDM,SAAS,EAAE,GADsC;MAEjDQ,SAAS,EAAE;IAFsC,CAA3C,CAAP;EAIA;;EAEDI,OAAO,CAACC,IAAD,EAAuB;IAC7B3B,aAAa,CAAC,KAAKW,KAAN,EAAagB,IAAb,EAAmB,KAAKd,MAAxB,CAAb;IACA,MAAMC,SAAS,GAAGa,IAAI,CAACC,UAAL,CAAgBC,GAAhB,CAAoB,WAApB,CAAlB;IAAiE;IACjE,KAAKf,SAAL,CAAegB,QAAf,CAAwBhB,SAAxB;IACA,MAAMiB,QAAQ,GAAGJ,IAAI,CAACC,UAAL,CAAgBC,GAAhB,CAAoB,UAApB,CAAjB;IAA+D;IAC/D,KAAKP,SAAL,CAAeQ,QAAf,CAAwBC,QAAxB;EACA;;EAEDC,OAAO;IACN,MAAMA,OAAN;IACA,KAAKrB,KAAL,CAAWqB,OAAX;IACA,KAAKnB,MAAL,CAAYmB,OAAZ;IACA,KAAKlB,SAAL,CAAekB,OAAf;IACA,KAAKV,SAAL,CAAeU,OAAf;IACA,OAAO,IAAP;EACA;;AAhFiF","names":["Gain","Param","connectSeries","ToneAudioNode","optionsFromArguments","readOnly","ToneAudioWorklet","workletName","FeedbackCombFilter","constructor","getDefaults","arguments","options","input","context","output","delayTime","value","units","minValue","maxValue","param","_dummyParam","swappable","resonance","_audioWorkletName","Object","assign","onReady","node","parameters","get","setParam","feedback","dispose"],"sourceRoot":"","sources":["../../../../Tone/component/filter/FeedbackCombFilter.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"module"}