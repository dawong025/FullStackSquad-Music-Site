{"ast":null,"code":"// 3rd party library imports\n// project imports\nimport { Visualizer } from '../Visualizers';\nexport const MilkdropVisualizer = new Visualizer('Milkdrop', (p5, analyzer) => {\n  const width = window.innerWidth;\n  const height = window.innerHeight / 2;\n  const dim = Math.min(width, height);\n  const values = analyzer.getValue();\n\n  for (let i = 0; i < values.length; i++) {\n    let currentDate = new Date();\n    const amplitude = values[i];\n    p5.background(p5.map(i, 0, values.length - 1, 0, width) * .3, (height / 2 + amplitude * height) * .3, values[i] * .2 * .3, 255 * currentDate.getSeconds());\n  }\n\n  p5.strokeWeight(dim * 0.01);\n  p5.stroke(255, 255, 255, 255);\n  p5.noFill();\n  p5.beginShape();\n\n  for (let i = 0; i < values.length; i++) {\n    const amplitude = values[i];\n    const y = p5.map(i, 0, values.length - 1, 0, width);\n    const x = height / 2 + amplitude * height; // Place vertex\n\n    p5.vertex(x + 100, y);\n  }\n\n  p5.endShape();\n  p5.beginShape();\n\n  for (let i = 0; i < values.length; i++) {\n    const amplitude = values[i];\n    const y = p5.map(i, 0, values.length - 1, 0, width);\n    const x = height / 2 + amplitude * height; // Place vertex\n\n    p5.vertex(x + 600, y);\n  }\n\n  p5.endShape();\n  p5.beginShape();\n\n  for (let i = 0; i < values.length; i++) {\n    const amplitude = values[i];\n    const y = p5.map(i, 0, values.length - 1, 0, width);\n    const x = height / 2 + amplitude * height; // Place vertex\n\n    p5.vertex(x + 1100, y);\n  }\n\n  p5.endShape();\n});","map":{"version":3,"names":["Visualizer","MilkdropVisualizer","p5","analyzer","width","window","innerWidth","height","innerHeight","dim","Math","min","values","getValue","i","length","currentDate","Date","amplitude","background","map","getSeconds","strokeWeight","stroke","noFill","beginShape","y","x","vertex","endShape"],"sources":["/Users/denyseluzon/Documents/GitHub/final-project-fullstacksquad/client/src/visualizers/Milkdrop.tsx"],"sourcesContent":["// 3rd party library imports\nimport P5 from 'p5';\nimport * as Tone from 'tone';\n\n// project imports\nimport { Visualizer } from '../Visualizers';\n\n\nexport const MilkdropVisualizer = new Visualizer(\n  'Milkdrop',\n  (p5: P5, analyzer: Tone.Analyser) => {\n    const width = window.innerWidth;\n    const height = window.innerHeight / 2;\n    const dim = Math.min(width, height);\n\n\n    const values = analyzer.getValue();\n    for (let i = 0; i < values.length; i++) {\n      let currentDate = new Date();\n      const amplitude = values[i] as number;\n      p5.background(\n        (p5.map(i, 0, values.length - 1, 0, width)) * .3, \n        (height / 2 + amplitude * height) * .3, \n        (values[i] as number * .2) * .3, \n        255 * (currentDate.getSeconds())\n      );\n    }\n\n    p5.strokeWeight(dim * 0.01);\n    p5.stroke(255, 255, 255, 255);\n    p5.noFill();\n\n    p5.beginShape();\n    for (let i = 0; i < values.length; i++) {\n      const amplitude = values[i] as number;\n      const y = p5.map(i, 0, values.length - 1, 0, width);\n      const x = height / 2 + amplitude * height;\n      // Place vertex\n      p5.vertex(x + 100, y);\n    }\n    p5.endShape();\n\n    p5.beginShape();\n    for (let i = 0; i < values.length; i++) {\n      const amplitude = values[i] as number;\n      const y = p5.map(i, 0, values.length - 1, 0, width);\n      const x = height / 2 + amplitude * height;\n      // Place vertex\n      p5.vertex(x + 600, y);\n    }\n    p5.endShape();\n\n    p5.beginShape();\n    for (let i = 0; i < values.length; i++) {\n      const amplitude = values[i] as number;\n      const y = p5.map(i, 0, values.length - 1, 0, width);\n      const x = height / 2 + amplitude * height;\n      // Place vertex\n      p5.vertex(x + 1100, y);\n    }\n    p5.endShape();\n\n  },\n);\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}