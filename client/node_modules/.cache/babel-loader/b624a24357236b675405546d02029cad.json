{"ast":null,"code":"import { ToneAudioNode } from \"../../core/context/ToneAudioNode\";\nimport { GreaterThan } from \"../../signal/GreaterThan\";\nimport { Gain } from \"../../core/context/Gain\";\nimport { Follower } from \"../analysis/Follower\";\nimport { optionsFromArguments } from \"../../core/util/Defaults\";\nimport { dbToGain, gainToDb } from \"../../core/type/Conversions\";\n/**\n * Gate only passes a signal through when the incoming\n * signal exceeds a specified threshold. It uses [[Follower]] to follow the ampltiude\n * of the incoming signal and compares it to the [[threshold]] value using [[GreaterThan]].\n *\n * @example\n * const gate = new Tone.Gate(-30, 0.2).toDestination();\n * const mic = new Tone.UserMedia().connect(gate);\n * // the gate will only pass through the incoming\n * // signal when it's louder than -30db\n * @category Component\n */\n\nexport class Gate extends ToneAudioNode {\n  constructor() {\n    super(Object.assign(optionsFromArguments(Gate.getDefaults(), arguments, [\"threshold\", \"smoothing\"])));\n    this.name = \"Gate\";\n    const options = optionsFromArguments(Gate.getDefaults(), arguments, [\"threshold\", \"smoothing\"]);\n    this._follower = new Follower({\n      context: this.context,\n      smoothing: options.smoothing\n    });\n    this._gt = new GreaterThan({\n      context: this.context,\n      value: dbToGain(options.threshold)\n    });\n    this.input = new Gain({\n      context: this.context\n    });\n    this._gate = this.output = new Gain({\n      context: this.context\n    }); // connections\n\n    this.input.connect(this._gate); // the control signal\n\n    this.input.chain(this._follower, this._gt, this._gate.gain);\n  }\n\n  static getDefaults() {\n    return Object.assign(ToneAudioNode.getDefaults(), {\n      smoothing: 0.1,\n      threshold: -40\n    });\n  }\n  /**\n   * The threshold of the gate in decibels\n   */\n\n\n  get threshold() {\n    return gainToDb(this._gt.value);\n  }\n\n  set threshold(thresh) {\n    this._gt.value = dbToGain(thresh);\n  }\n  /**\n   * The attack/decay speed of the gate. See [[Follower.smoothing]]\n   */\n\n\n  get smoothing() {\n    return this._follower.smoothing;\n  }\n\n  set smoothing(smoothingTime) {\n    this._follower.smoothing = smoothingTime;\n  }\n\n  dispose() {\n    super.dispose();\n    this.input.dispose();\n\n    this._follower.dispose();\n\n    this._gt.dispose();\n\n    this._gate.dispose();\n\n    return this;\n  }\n\n}","map":{"version":3,"mappings":"AAAA,SAASA,aAAT,QAAoD,kCAApD;AAEA,SAASC,WAAT,QAA4B,0BAA5B;AACA,SAASC,IAAT,QAAqB,yBAArB;AACA,SAASC,QAAT,QAAyB,sBAAzB;AACA,SAASC,oBAAT,QAAqC,0BAArC;AACA,SAASC,QAAT,EAAmBC,QAAnB,QAAmC,6BAAnC;AAOA;;;;;;;;;;;;;AAYA,OAAM,MAAOC,IAAP,SAAoBP,aAApB,CAA8C;EA4BnDQ;IACC,MAAMC,MAAM,CAACC,MAAP,CAAcN,oBAAoB,CAACG,IAAI,CAACI,WAAL,EAAD,EAAqBC,SAArB,EAAgC,CAAC,WAAD,EAAc,WAAd,CAAhC,CAAlC,CAAN;IA3BQ,YAAe,MAAf;IA4BR,MAAMC,OAAO,GAAGT,oBAAoB,CAACG,IAAI,CAACI,WAAL,EAAD,EAAqBC,SAArB,EAAgC,CAAC,WAAD,EAAc,WAAd,CAAhC,CAApC;IAEA,KAAKE,SAAL,GAAiB,IAAIX,QAAJ,CAAa;MAC7BY,OAAO,EAAE,KAAKA,OADe;MAE7BC,SAAS,EAAEH,OAAO,CAACG;IAFU,CAAb,CAAjB;IAIA,KAAKC,GAAL,GAAW,IAAIhB,WAAJ,CAAgB;MAC1Bc,OAAO,EAAE,KAAKA,OADY;MAE1BG,KAAK,EAAEb,QAAQ,CAACQ,OAAO,CAACM,SAAT;IAFW,CAAhB,CAAX;IAIA,KAAKC,KAAL,GAAa,IAAIlB,IAAJ,CAAS;MAAEa,OAAO,EAAE,KAAKA;IAAhB,CAAT,CAAb;IACA,KAAKM,KAAL,GAAa,KAAKC,MAAL,GAAc,IAAIpB,IAAJ,CAAS;MAAEa,OAAO,EAAE,KAAKA;IAAhB,CAAT,CAA3B,CAbD,CAeC;;IACA,KAAKK,KAAL,CAAWG,OAAX,CAAmB,KAAKF,KAAxB,EAhBD,CAiBC;;IACA,KAAKD,KAAL,CAAWI,KAAX,CAAiB,KAAKV,SAAtB,EAAiC,KAAKG,GAAtC,EAA2C,KAAKI,KAAL,CAAWI,IAAtD;EACA;;EAEiB,OAAXd,WAAW;IACjB,OAAOF,MAAM,CAACC,MAAP,CAAcV,aAAa,CAACW,WAAd,EAAd,EAA2C;MACjDK,SAAS,EAAE,GADsC;MAEjDG,SAAS,EAAE,CAAC;IAFqC,CAA3C,CAAP;EAIA;EAED;;;;;EAGa,IAATA,SAAS;IACZ,OAAOb,QAAQ,CAAC,KAAKW,GAAL,CAASC,KAAV,CAAf;EACA;;EACY,IAATC,SAAS,CAACO,MAAD,EAAO;IACnB,KAAKT,GAAL,CAASC,KAAT,GAAiBb,QAAQ,CAACqB,MAAD,CAAzB;EACA;EAED;;;;;EAGa,IAATV,SAAS;IACZ,OAAO,KAAKF,SAAL,CAAeE,SAAtB;EACA;;EACY,IAATA,SAAS,CAACW,aAAD,EAAc;IAC1B,KAAKb,SAAL,CAAeE,SAAf,GAA2BW,aAA3B;EACA;;EAEDC,OAAO;IACN,MAAMA,OAAN;IACA,KAAKR,KAAL,CAAWQ,OAAX;;IACA,KAAKd,SAAL,CAAec,OAAf;;IACA,KAAKX,GAAL,CAASW,OAAT;;IACA,KAAKP,KAAL,CAAWO,OAAX;;IACA,OAAO,IAAP;EACA;;AAnFkD","names":["ToneAudioNode","GreaterThan","Gain","Follower","optionsFromArguments","dbToGain","gainToDb","Gate","constructor","Object","assign","getDefaults","arguments","options","_follower","context","smoothing","_gt","value","threshold","input","_gate","output","connect","chain","gain","thresh","smoothingTime","dispose"],"sourceRoot":"","sources":["../../../../Tone/component/dynamics/Gate.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"module"}