{"ast":null,"code":"import { connect } from \"../core/context/ToneAudioNode\";\nimport { Param } from \"../core/context/Param\";\nimport { optionsFromArguments } from \"../core/util/Defaults\";\nimport { OneShotSource } from \"../source/OneShotSource\";\n/**\n * Wrapper around the native fire-and-forget ConstantSource.\n * Adds the ability to reschedule the stop method.\n * @category Signal\n */\n\nexport class ToneConstantSource extends OneShotSource {\n  constructor() {\n    super(optionsFromArguments(ToneConstantSource.getDefaults(), arguments, [\"offset\"]));\n    this.name = \"ToneConstantSource\";\n    /**\n     * The signal generator\n     */\n\n    this._source = this.context.createConstantSource();\n    const options = optionsFromArguments(ToneConstantSource.getDefaults(), arguments, [\"offset\"]);\n    connect(this._source, this._gainNode);\n    this.offset = new Param({\n      context: this.context,\n      convert: options.convert,\n      param: this._source.offset,\n      units: options.units,\n      value: options.offset,\n      minValue: options.minValue,\n      maxValue: options.maxValue\n    });\n  }\n\n  static getDefaults() {\n    return Object.assign(OneShotSource.getDefaults(), {\n      convert: true,\n      offset: 1,\n      units: \"number\"\n    });\n  }\n  /**\n   * Start the source node at the given time\n   * @param  time When to start the source\n   */\n\n\n  start(time) {\n    const computedTime = this.toSeconds(time);\n    this.log(\"start\", computedTime);\n\n    this._startGain(computedTime);\n\n    this._source.start(computedTime);\n\n    return this;\n  }\n\n  _stopSource(time) {\n    this._source.stop(time);\n  }\n\n  dispose() {\n    super.dispose();\n\n    if (this.state === \"started\") {\n      this.stop();\n    }\n\n    this._source.disconnect();\n\n    this.offset.dispose();\n    return this;\n  }\n\n}","map":{"version":3,"mappings":"AAAA,SAASA,OAAT,QAAwB,+BAAxB;AACA,SAASC,KAAT,QAAsB,uBAAtB;AAEA,SAASC,oBAAT,QAAqC,uBAArC;AACA,SAASC,aAAT,QAAoD,yBAApD;AAUA;;;;;;AAKA,OAAM,MAAOC,kBAAP,SAAwED,aAAxE,CAA0H;EAmB/HE;IAEC,MAAMH,oBAAoB,CAACE,kBAAkB,CAACE,WAAnB,EAAD,EAAmCC,SAAnC,EAA8C,CAAC,QAAD,CAA9C,CAA1B;IAnBQ,YAAe,oBAAf;IAET;;;;IAGQ,eAAU,KAAKC,OAAL,CAAaC,oBAAb,EAAV;IAeP,MAAMC,OAAO,GAAGR,oBAAoB,CAACE,kBAAkB,CAACE,WAAnB,EAAD,EAAmCC,SAAnC,EAA8C,CAAC,QAAD,CAA9C,CAApC;IAEAP,OAAO,CAAC,KAAKW,OAAN,EAAe,KAAKC,SAApB,CAAP;IAEA,KAAKC,MAAL,GAAc,IAAIZ,KAAJ,CAAU;MACvBO,OAAO,EAAE,KAAKA,OADS;MAEvBM,OAAO,EAAEJ,OAAO,CAACI,OAFM;MAGvBC,KAAK,EAAE,KAAKJ,OAAL,CAAaE,MAHG;MAIvBG,KAAK,EAAEN,OAAO,CAACM,KAJQ;MAKvBC,KAAK,EAAEP,OAAO,CAACG,MALQ;MAMvBK,QAAQ,EAAER,OAAO,CAACQ,QANK;MAOvBC,QAAQ,EAAET,OAAO,CAACS;IAPK,CAAV,CAAd;EASA;;EAEiB,OAAXb,WAAW;IACjB,OAAOc,MAAM,CAACC,MAAP,CAAclB,aAAa,CAACG,WAAd,EAAd,EAA2C;MACjDQ,OAAO,EAAE,IADwC;MAEjDD,MAAM,EAAE,CAFyC;MAGjDG,KAAK,EAAE;IAH0C,CAA3C,CAAP;EAKA;EAED;;;;;;EAIAM,KAAK,CAACC,IAAD,EAAY;IAChB,MAAMC,YAAY,GAAG,KAAKC,SAAL,CAAeF,IAAf,CAArB;IACA,KAAKG,GAAL,CAAS,OAAT,EAAkBF,YAAlB;;IACA,KAAKG,UAAL,CAAgBH,YAAhB;;IACA,KAAKb,OAAL,CAAaW,KAAb,CAAmBE,YAAnB;;IACA,OAAO,IAAP;EACA;;EAESI,WAAW,CAACL,IAAD,EAAe;IACnC,KAAKZ,OAAL,CAAakB,IAAb,CAAkBN,IAAlB;EACA;;EAEDO,OAAO;IACN,MAAMA,OAAN;;IACA,IAAI,KAAKC,KAAL,KAAe,SAAnB,EAA8B;MAC7B,KAAKF,IAAL;IACA;;IACD,KAAKlB,OAAL,CAAaqB,UAAb;;IACA,KAAKnB,MAAL,CAAYiB,OAAZ;IACA,OAAO,IAAP;EACA;;AArE8H","names":["connect","Param","optionsFromArguments","OneShotSource","ToneConstantSource","constructor","getDefaults","arguments","context","createConstantSource","options","_source","_gainNode","offset","convert","param","units","value","minValue","maxValue","Object","assign","start","time","computedTime","toSeconds","log","_startGain","_stopSource","stop","dispose","state","disconnect"],"sourceRoot":"","sources":["../../../Tone/signal/ToneConstantSource.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"module"}