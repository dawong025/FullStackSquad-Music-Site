{"ast":null,"code":"import { MidSideEffect } from \"../effect/MidSideEffect\";\nimport { Signal } from \"../signal/Signal\";\nimport { Multiply } from \"../signal/Multiply\";\nimport { Subtract } from \"../signal/Subtract\";\nimport { optionsFromArguments } from \"../core/util/Defaults\";\nimport { readOnly } from \"../core/util/Interface\";\nimport { connect } from \"../core/context/ToneAudioNode\";\n/**\n * Applies a width factor to the mid/side seperation.\n * 0 is all mid and 1 is all side.\n * Algorithm found in [kvraudio forums](http://www.kvraudio.com/forum/viewtopic.php?t=212587).\n * ```\n * Mid *= 2*(1-width)<br>\n * Side *= 2*width\n * ```\n * @category Effect\n */\n\nexport class StereoWidener extends MidSideEffect {\n  constructor() {\n    super(optionsFromArguments(StereoWidener.getDefaults(), arguments, [\"width\"]));\n    this.name = \"StereoWidener\";\n    const options = optionsFromArguments(StereoWidener.getDefaults(), arguments, [\"width\"]);\n    this.width = new Signal({\n      context: this.context,\n      value: options.width,\n      units: \"normalRange\"\n    });\n    readOnly(this, [\"width\"]);\n    this._twoTimesWidthMid = new Multiply({\n      context: this.context,\n      value: 2\n    });\n    this._twoTimesWidthSide = new Multiply({\n      context: this.context,\n      value: 2\n    });\n    this._midMult = new Multiply({\n      context: this.context\n    });\n\n    this._twoTimesWidthMid.connect(this._midMult.factor);\n\n    this.connectEffectMid(this._midMult);\n    this._oneMinusWidth = new Subtract({\n      context: this.context\n    });\n\n    this._oneMinusWidth.connect(this._twoTimesWidthMid);\n\n    connect(this.context.getConstant(1), this._oneMinusWidth);\n    this.width.connect(this._oneMinusWidth.subtrahend);\n    this._sideMult = new Multiply({\n      context: this.context\n    });\n    this.width.connect(this._twoTimesWidthSide);\n\n    this._twoTimesWidthSide.connect(this._sideMult.factor);\n\n    this.connectEffectSide(this._sideMult);\n  }\n\n  static getDefaults() {\n    return Object.assign(MidSideEffect.getDefaults(), {\n      width: 0.5\n    });\n  }\n\n  dispose() {\n    super.dispose();\n    this.width.dispose();\n\n    this._midMult.dispose();\n\n    this._sideMult.dispose();\n\n    this._twoTimesWidthMid.dispose();\n\n    this._twoTimesWidthSide.dispose();\n\n    this._oneMinusWidth.dispose();\n\n    return this;\n  }\n\n}","map":{"version":3,"mappings":"AAAA,SAASA,aAAT,QAAoD,yBAApD;AACA,SAASC,MAAT,QAAuB,kBAAvB;AACA,SAASC,QAAT,QAAyB,oBAAzB;AACA,SAASC,QAAT,QAAyB,oBAAzB;AAEA,SAASC,oBAAT,QAAqC,uBAArC;AACA,SAASC,QAAT,QAAyB,wBAAzB;AACA,SAASC,OAAT,QAAwB,+BAAxB;AAMA;;;;;;;;;;;AAUA,OAAM,MAAOC,aAAP,SAA6BP,aAA7B,CAAgE;EAuCrEQ;IAEC,MAAMJ,oBAAoB,CAACG,aAAa,CAACE,WAAd,EAAD,EAA8BC,SAA9B,EAAyC,CAAC,OAAD,CAAzC,CAA1B;IAvCQ,YAAe,eAAf;IAwCR,MAAMC,OAAO,GAAGP,oBAAoB,CAACG,aAAa,CAACE,WAAd,EAAD,EAA8BC,SAA9B,EAAyC,CAAC,OAAD,CAAzC,CAApC;IACA,KAAKE,KAAL,GAAa,IAAIX,MAAJ,CAAW;MACvBY,OAAO,EAAE,KAAKA,OADS;MAEvBC,KAAK,EAAEH,OAAO,CAACC,KAFQ;MAGvBG,KAAK,EAAE;IAHgB,CAAX,CAAb;IAKAV,QAAQ,CAAC,IAAD,EAAO,CAAC,OAAD,CAAP,CAAR;IACA,KAAKW,iBAAL,GAAyB,IAAId,QAAJ,CAAa;MACrCW,OAAO,EAAE,KAAKA,OADuB;MAErCC,KAAK,EAAE;IAF8B,CAAb,CAAzB;IAIA,KAAKG,kBAAL,GAA0B,IAAIf,QAAJ,CAAa;MACtCW,OAAO,EAAE,KAAKA,OADwB;MAEtCC,KAAK,EAAE;IAF+B,CAAb,CAA1B;IAIA,KAAKI,QAAL,GAAgB,IAAIhB,QAAJ,CAAa;MAAEW,OAAO,EAAE,KAAKA;IAAhB,CAAb,CAAhB;;IACA,KAAKG,iBAAL,CAAuBV,OAAvB,CAA+B,KAAKY,QAAL,CAAcC,MAA7C;;IACA,KAAKC,gBAAL,CAAsB,KAAKF,QAA3B;IAEA,KAAKG,cAAL,GAAsB,IAAIlB,QAAJ,CAAa;MAAEU,OAAO,EAAE,KAAKA;IAAhB,CAAb,CAAtB;;IACA,KAAKQ,cAAL,CAAoBf,OAApB,CAA4B,KAAKU,iBAAjC;;IACAV,OAAO,CAAC,KAAKO,OAAL,CAAaS,WAAb,CAAyB,CAAzB,CAAD,EAA8B,KAAKD,cAAnC,CAAP;IACA,KAAKT,KAAL,CAAWN,OAAX,CAAmB,KAAKe,cAAL,CAAoBE,UAAvC;IAEA,KAAKC,SAAL,GAAiB,IAAItB,QAAJ,CAAa;MAAEW,OAAO,EAAE,KAAKA;IAAhB,CAAb,CAAjB;IACA,KAAKD,KAAL,CAAWN,OAAX,CAAmB,KAAKW,kBAAxB;;IACA,KAAKA,kBAAL,CAAwBX,OAAxB,CAAgC,KAAKkB,SAAL,CAAeL,MAA/C;;IACA,KAAKM,iBAAL,CAAuB,KAAKD,SAA5B;EACA;;EAEiB,OAAXf,WAAW;IACjB,OAAOiB,MAAM,CAACC,MAAP,CAAc3B,aAAa,CAACS,WAAd,EAAd,EAA2C;MACjDG,KAAK,EAAE;IAD0C,CAA3C,CAAP;EAGA;;EAEDgB,OAAO;IACN,MAAMA,OAAN;IACA,KAAKhB,KAAL,CAAWgB,OAAX;;IACA,KAAKV,QAAL,CAAcU,OAAd;;IACA,KAAKJ,SAAL,CAAeI,OAAf;;IACA,KAAKZ,iBAAL,CAAuBY,OAAvB;;IACA,KAAKX,kBAAL,CAAwBW,OAAxB;;IACA,KAAKP,cAAL,CAAoBO,OAApB;;IACA,OAAO,IAAP;EACA;;AAvFoE","names":["MidSideEffect","Signal","Multiply","Subtract","optionsFromArguments","readOnly","connect","StereoWidener","constructor","getDefaults","arguments","options","width","context","value","units","_twoTimesWidthMid","_twoTimesWidthSide","_midMult","factor","connectEffectMid","_oneMinusWidth","getConstant","subtrahend","_sideMult","connectEffectSide","Object","assign","dispose"],"sourceRoot":"","sources":["../../../Tone/effect/StereoWidener.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"module"}