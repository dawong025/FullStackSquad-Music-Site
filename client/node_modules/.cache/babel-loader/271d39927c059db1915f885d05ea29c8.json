{"ast":null,"code":"import { getContext } from \"../Global\";\nimport { intervalToFrequencyRatio, mtof } from \"./Conversions\";\nimport { ftom, getA4, setA4 } from \"./Conversions\";\nimport { TimeClass } from \"./Time\";\n/**\n * Frequency is a primitive type for encoding Frequency values.\n * Eventually all time values are evaluated to hertz using the `valueOf` method.\n * @example\n * Tone.Frequency(\"C3\"); // 261\n * Tone.Frequency(38, \"midi\");\n * Tone.Frequency(\"C3\").transpose(4);\n * @category Unit\n */\n\nexport class FrequencyClass extends TimeClass {\n  constructor() {\n    super(...arguments);\n    this.name = \"Frequency\";\n    this.defaultUnits = \"hz\";\n  }\n  /**\n   * The [concert tuning pitch](https://en.wikipedia.org/wiki/Concert_pitch) which is used\n   * to generate all the other pitch values from notes. A4's values in Hertz.\n   */\n\n\n  static get A4() {\n    return getA4();\n  }\n\n  static set A4(freq) {\n    setA4(freq);\n  } //-------------------------------------\n  // \tAUGMENT BASE EXPRESSIONS\n  //-------------------------------------\n\n\n  _getExpressions() {\n    return Object.assign({}, super._getExpressions(), {\n      midi: {\n        regexp: /^(\\d+(?:\\.\\d+)?midi)/,\n\n        method(value) {\n          if (this.defaultUnits === \"midi\") {\n            return value;\n          } else {\n            return FrequencyClass.mtof(value);\n          }\n        }\n\n      },\n      note: {\n        regexp: /^([a-g]{1}(?:b|#|x|bb)?)(-?[0-9]+)/i,\n\n        method(pitch, octave) {\n          const index = noteToScaleIndex[pitch.toLowerCase()];\n          const noteNumber = index + (parseInt(octave, 10) + 1) * 12;\n\n          if (this.defaultUnits === \"midi\") {\n            return noteNumber;\n          } else {\n            return FrequencyClass.mtof(noteNumber);\n          }\n        }\n\n      },\n      tr: {\n        regexp: /^(\\d+(?:\\.\\d+)?):(\\d+(?:\\.\\d+)?):?(\\d+(?:\\.\\d+)?)?/,\n\n        method(m, q, s) {\n          let total = 1;\n\n          if (m && m !== \"0\") {\n            total *= this._beatsToUnits(this._getTimeSignature() * parseFloat(m));\n          }\n\n          if (q && q !== \"0\") {\n            total *= this._beatsToUnits(parseFloat(q));\n          }\n\n          if (s && s !== \"0\") {\n            total *= this._beatsToUnits(parseFloat(s) / 4);\n          }\n\n          return total;\n        }\n\n      }\n    });\n  } //-------------------------------------\n  // \tEXPRESSIONS\n  //-------------------------------------\n\n  /**\n   * Transposes the frequency by the given number of semitones.\n   * @return  A new transposed frequency\n   * @example\n   * Tone.Frequency(\"A4\").transpose(3); // \"C5\"\n   */\n\n\n  transpose(interval) {\n    return new FrequencyClass(this.context, this.valueOf() * intervalToFrequencyRatio(interval));\n  }\n  /**\n   * Takes an array of semitone intervals and returns\n   * an array of frequencies transposed by those intervals.\n   * @return  Returns an array of Frequencies\n   * @example\n   * Tone.Frequency(\"A4\").harmonize([0, 3, 7]); // [\"A4\", \"C5\", \"E5\"]\n   */\n\n\n  harmonize(intervals) {\n    return intervals.map(interval => {\n      return this.transpose(interval);\n    });\n  } //-------------------------------------\n  // \tUNIT CONVERSIONS\n  //-------------------------------------\n\n  /**\n   * Return the value of the frequency as a MIDI note\n   * @example\n   * Tone.Frequency(\"C4\").toMidi(); // 60\n   */\n\n\n  toMidi() {\n    return ftom(this.valueOf());\n  }\n  /**\n   * Return the value of the frequency in Scientific Pitch Notation\n   * @example\n   * Tone.Frequency(69, \"midi\").toNote(); // \"A4\"\n   */\n\n\n  toNote() {\n    const freq = this.toFrequency();\n    const log = Math.log2(freq / FrequencyClass.A4);\n    let noteNumber = Math.round(12 * log) + 57;\n    const octave = Math.floor(noteNumber / 12);\n\n    if (octave < 0) {\n      noteNumber += -12 * octave;\n    }\n\n    const noteName = scaleIndexToNote[noteNumber % 12];\n    return noteName + octave.toString();\n  }\n  /**\n   * Return the duration of one cycle in seconds.\n   */\n\n\n  toSeconds() {\n    return 1 / super.toSeconds();\n  }\n  /**\n   * Return the duration of one cycle in ticks\n   */\n\n\n  toTicks() {\n    const quarterTime = this._beatsToUnits(1);\n\n    const quarters = this.valueOf() / quarterTime;\n    return Math.floor(quarters * this._getPPQ());\n  } //-------------------------------------\n  // \tUNIT CONVERSIONS HELPERS\n  //-------------------------------------\n\n  /**\n   * With no arguments, return 0\n   */\n\n\n  _noArg() {\n    return 0;\n  }\n  /**\n   * Returns the value of a frequency in the current units\n   */\n\n\n  _frequencyToUnits(freq) {\n    return freq;\n  }\n  /**\n   * Returns the value of a tick in the current time units\n   */\n\n\n  _ticksToUnits(ticks) {\n    return 1 / (ticks * 60 / (this._getBpm() * this._getPPQ()));\n  }\n  /**\n   * Return the value of the beats in the current units\n   */\n\n\n  _beatsToUnits(beats) {\n    return 1 / super._beatsToUnits(beats);\n  }\n  /**\n   * Returns the value of a second in the current units\n   */\n\n\n  _secondsToUnits(seconds) {\n    return 1 / seconds;\n  }\n  /**\n   * Convert a MIDI note to frequency value.\n   * @param  midi The midi number to convert.\n   * @return The corresponding frequency value\n   */\n\n\n  static mtof(midi) {\n    return mtof(midi);\n  }\n  /**\n   * Convert a frequency value to a MIDI note.\n   * @param frequency The value to frequency value to convert.\n   */\n\n\n  static ftom(frequency) {\n    return ftom(frequency);\n  }\n\n} //-------------------------------------\n// \tFREQUENCY CONVERSIONS\n//-------------------------------------\n\n/**\n * Note to scale index.\n * @hidden\n */\n\nconst noteToScaleIndex = {\n  cbb: -2,\n  cb: -1,\n  c: 0,\n  \"c#\": 1,\n  cx: 2,\n  dbb: 0,\n  db: 1,\n  d: 2,\n  \"d#\": 3,\n  dx: 4,\n  ebb: 2,\n  eb: 3,\n  e: 4,\n  \"e#\": 5,\n  ex: 6,\n  fbb: 3,\n  fb: 4,\n  f: 5,\n  \"f#\": 6,\n  fx: 7,\n  gbb: 5,\n  gb: 6,\n  g: 7,\n  \"g#\": 8,\n  gx: 9,\n  abb: 7,\n  ab: 8,\n  a: 9,\n  \"a#\": 10,\n  ax: 11,\n  bbb: 9,\n  bb: 10,\n  b: 11,\n  \"b#\": 12,\n  bx: 13\n};\n/**\n * scale index to note (sharps)\n * @hidden\n */\n\nconst scaleIndexToNote = [\"C\", \"C#\", \"D\", \"D#\", \"E\", \"F\", \"F#\", \"G\", \"G#\", \"A\", \"A#\", \"B\"];\n/**\n * Convert a value into a FrequencyClass object.\n * @category Unit\n * @example\n * const midi = Tone.Frequency(\"C3\").toMidi();\n * console.log(midi);\n * @example\n * const hertz = Tone.Frequency(38, \"midi\").toFrequency();\n * console.log(hertz);\n */\n\nexport function Frequency(value, units) {\n  return new FrequencyClass(getContext(), value, units);\n}","map":{"version":3,"mappings":"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","names":["getContext","intervalToFrequencyRatio","mtof","ftom","getA4","setA4","TimeClass","FrequencyClass","constructor","A4","freq","_getExpressions","Object","assign","midi","regexp","method","value","defaultUnits","note","pitch","octave","index","noteToScaleIndex","toLowerCase","noteNumber","parseInt","tr","m","q","s","total","_beatsToUnits","_getTimeSignature","parseFloat","transpose","interval","context","valueOf","harmonize","intervals","map","toMidi","toNote","toFrequency","log","Math","log2","round","floor","noteName","scaleIndexToNote","toString","toSeconds","toTicks","quarterTime","quarters","_getPPQ","_noArg","_frequencyToUnits","_ticksToUnits","ticks","_getBpm","beats","_secondsToUnits","seconds","frequency","cbb","cb","c","cx","dbb","db","d","dx","ebb","eb","e","ex","fbb","fb","f","fx","gbb","gb","g","gx","abb","ab","a","ax","bbb","bb","b","bx","Frequency","units"],"sourceRoot":"","sources":["../../../../Tone/core/type/Frequency.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"module"}