{"ast":null,"code":"import { ToneAudioNode } from \"../../core/context/ToneAudioNode\";\nimport { optionsFromArguments } from \"../../core/util/Defaults\";\nimport { FeedbackCombFilter } from \"./FeedbackCombFilter\";\nimport { OnePoleFilter } from \"./OnePoleFilter\";\n/**\n * A lowpass feedback comb filter. It is similar to\n * [[FeedbackCombFilter]], but includes a lowpass filter.\n * @category Component\n */\n\nexport class LowpassCombFilter extends ToneAudioNode {\n  constructor() {\n    super(optionsFromArguments(LowpassCombFilter.getDefaults(), arguments, [\"delayTime\", \"resonance\", \"dampening\"]));\n    this.name = \"LowpassCombFilter\";\n    const options = optionsFromArguments(LowpassCombFilter.getDefaults(), arguments, [\"delayTime\", \"resonance\", \"dampening\"]);\n    this._combFilter = this.output = new FeedbackCombFilter({\n      context: this.context,\n      delayTime: options.delayTime,\n      resonance: options.resonance\n    });\n    this.delayTime = this._combFilter.delayTime;\n    this.resonance = this._combFilter.resonance;\n    this._lowpass = this.input = new OnePoleFilter({\n      context: this.context,\n      frequency: options.dampening,\n      type: \"lowpass\"\n    }); // connections\n\n    this._lowpass.connect(this._combFilter);\n  }\n\n  static getDefaults() {\n    return Object.assign(ToneAudioNode.getDefaults(), {\n      dampening: 3000,\n      delayTime: 0.1,\n      resonance: 0.5\n    });\n  }\n  /**\n   * The dampening control of the feedback\n   */\n\n\n  get dampening() {\n    return this._lowpass.frequency;\n  }\n\n  set dampening(fq) {\n    this._lowpass.frequency = fq;\n  }\n\n  dispose() {\n    super.dispose();\n\n    this._combFilter.dispose();\n\n    this._lowpass.dispose();\n\n    return this;\n  }\n\n}","map":{"version":3,"mappings":"AACA,SAAgCA,aAAhC,QAA2E,kCAA3E;AAEA,SAASC,oBAAT,QAAqC,0BAArC;AAEA,SAASC,kBAAT,QAAmC,sBAAnC;AACA,SAASC,aAAT,QAA8B,iBAA9B;AAQA;;;;;;AAKA,OAAM,MAAOC,iBAAP,SAAiCJ,aAAjC,CAAwE;EAkC7EK;IACC,MAAMJ,oBAAoB,CAACG,iBAAiB,CAACE,WAAlB,EAAD,EAAkCC,SAAlC,EAA6C,CAAC,WAAD,EAAc,WAAd,EAA2B,WAA3B,CAA7C,CAA1B;IAjCQ,YAAO,mBAAP;IAkCR,MAAMC,OAAO,GAAGP,oBAAoB,CAACG,iBAAiB,CAACE,WAAlB,EAAD,EAAkCC,SAAlC,EAA6C,CAAC,WAAD,EAAc,WAAd,EAA2B,WAA3B,CAA7C,CAApC;IAEA,KAAKE,WAAL,GAAmB,KAAKC,MAAL,GAAc,IAAIR,kBAAJ,CAAuB;MACvDS,OAAO,EAAE,KAAKA,OADyC;MAEvDC,SAAS,EAAEJ,OAAO,CAACI,SAFoC;MAGvDC,SAAS,EAAEL,OAAO,CAACK;IAHoC,CAAvB,CAAjC;IAKA,KAAKD,SAAL,GAAiB,KAAKH,WAAL,CAAiBG,SAAlC;IACA,KAAKC,SAAL,GAAiB,KAAKJ,WAAL,CAAiBI,SAAlC;IAEA,KAAKC,QAAL,GAAgB,KAAKC,KAAL,GAAa,IAAIZ,aAAJ,CAAkB;MAC9CQ,OAAO,EAAE,KAAKA,OADgC;MAE9CK,SAAS,EAAER,OAAO,CAACS,SAF2B;MAG9CC,IAAI,EAAE;IAHwC,CAAlB,CAA7B,CAZD,CAkBC;;IACA,KAAKJ,QAAL,CAAcK,OAAd,CAAsB,KAAKV,WAA3B;EACA;;EAEiB,OAAXH,WAAW;IACjB,OAAOc,MAAM,CAACC,MAAP,CAAcrB,aAAa,CAACM,WAAd,EAAd,EAA2C;MACjDW,SAAS,EAAE,IADsC;MAEjDL,SAAS,EAAE,GAFsC;MAGjDC,SAAS,EAAE;IAHsC,CAA3C,CAAP;EAKA;EAED;;;;;EAGa,IAATI,SAAS;IACZ,OAAO,KAAKH,QAAL,CAAcE,SAArB;EACA;;EACY,IAATC,SAAS,CAACK,EAAD,EAAG;IACf,KAAKR,QAAL,CAAcE,SAAd,GAA0BM,EAA1B;EACA;;EAEDC,OAAO;IACN,MAAMA,OAAN;;IACA,KAAKd,WAAL,CAAiBc,OAAjB;;IACA,KAAKT,QAAL,CAAcS,OAAd;;IACA,OAAO,IAAP;EACA;;AA/E4E","names":["ToneAudioNode","optionsFromArguments","FeedbackCombFilter","OnePoleFilter","LowpassCombFilter","constructor","getDefaults","arguments","options","_combFilter","output","context","delayTime","resonance","_lowpass","input","frequency","dampening","type","connect","Object","assign","fq","dispose"],"sourceRoot":"","sources":["../../../../Tone/component/filter/LowpassCombFilter.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"module"}