{"ast":null,"code":"import { __awaiter } from \"tslib\";\nimport { optionsFromArguments } from \"../../core/util/Defaults\";\nimport { readOnly } from \"../../core/util/Interface\";\nimport { Multiply } from \"../../signal/Multiply\";\nimport { Source } from \"../Source\";\nimport { Oscillator } from \"./Oscillator\";\nimport { generateWaveform } from \"./OscillatorInterface\";\nimport { PulseOscillator } from \"./PulseOscillator\";\n/**\n * PWMOscillator modulates the width of a Tone.PulseOscillator\n * at the modulationFrequency. This has the effect of continuously\n * changing the timbre of the oscillator by altering the harmonics\n * generated.\n * @example\n * return Tone.Offline(() => {\n * \tconst pwm = new Tone.PWMOscillator(60, 0.3).toDestination().start();\n * }, 0.1, 1);\n * @category Source\n */\n\nexport class PWMOscillator extends Source {\n  constructor() {\n    super(optionsFromArguments(PWMOscillator.getDefaults(), arguments, [\"frequency\", \"modulationFrequency\"]));\n    this.name = \"PWMOscillator\";\n    this.sourceType = \"pwm\";\n    /**\n     * Scale the oscillator so it doesn't go silent\n     * at the extreme values.\n     */\n\n    this._scale = new Multiply({\n      context: this.context,\n      value: 2\n    });\n    const options = optionsFromArguments(PWMOscillator.getDefaults(), arguments, [\"frequency\", \"modulationFrequency\"]);\n    this._pulse = new PulseOscillator({\n      context: this.context,\n      frequency: options.modulationFrequency\n    }); // change the pulse oscillator type\n\n    this._pulse.carrierType = \"sine\";\n    this.modulationFrequency = this._pulse.frequency;\n    this._modulator = new Oscillator({\n      context: this.context,\n      detune: options.detune,\n      frequency: options.frequency,\n      onstop: () => this.onstop(this),\n      phase: options.phase\n    });\n    this.frequency = this._modulator.frequency;\n    this.detune = this._modulator.detune; // connections\n\n    this._modulator.chain(this._scale, this._pulse.width);\n\n    this._pulse.connect(this.output);\n\n    readOnly(this, [\"modulationFrequency\", \"frequency\", \"detune\"]);\n  }\n\n  static getDefaults() {\n    return Object.assign(Source.getDefaults(), {\n      detune: 0,\n      frequency: 440,\n      modulationFrequency: 0.4,\n      phase: 0,\n      type: \"pwm\"\n    });\n  }\n  /**\n   * start the oscillator\n   */\n\n\n  _start(time) {\n    time = this.toSeconds(time);\n\n    this._modulator.start(time);\n\n    this._pulse.start(time);\n  }\n  /**\n   * stop the oscillator\n   */\n\n\n  _stop(time) {\n    time = this.toSeconds(time);\n\n    this._modulator.stop(time);\n\n    this._pulse.stop(time);\n  }\n  /**\n   * restart the oscillator\n   */\n\n\n  _restart(time) {\n    this._modulator.restart(time);\n\n    this._pulse.restart(time);\n  }\n  /**\n   * The type of the oscillator. Always returns \"pwm\".\n   */\n\n\n  get type() {\n    return \"pwm\";\n  }\n  /**\n   * The baseType of the oscillator. Always returns \"pwm\".\n   */\n\n\n  get baseType() {\n    return \"pwm\";\n  }\n  /**\n   * The partials of the waveform. Cannot set partials for this waveform type\n   */\n\n\n  get partials() {\n    return [];\n  }\n  /**\n   * No partials for this waveform type.\n   */\n\n\n  get partialCount() {\n    return 0;\n  }\n  /**\n   * The phase of the oscillator in degrees.\n   */\n\n\n  get phase() {\n    return this._modulator.phase;\n  }\n\n  set phase(phase) {\n    this._modulator.phase = phase;\n  }\n\n  asArray() {\n    let length = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 1024;\n    return __awaiter(this, void 0, void 0, function* () {\n      return generateWaveform(this, length);\n    });\n  }\n  /**\n   * Clean up.\n   */\n\n\n  dispose() {\n    super.dispose();\n\n    this._pulse.dispose();\n\n    this._scale.dispose();\n\n    this._modulator.dispose();\n\n    return this;\n  }\n\n}","map":{"version":3,"mappings":"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","names":["optionsFromArguments","readOnly","Multiply","Source","Oscillator","generateWaveform","PulseOscillator","PWMOscillator","constructor","getDefaults","arguments","context","value","options","_pulse","frequency","modulationFrequency","carrierType","_modulator","detune","onstop","phase","chain","_scale","width","connect","output","Object","assign","type","_start","time","toSeconds","start","_stop","stop","_restart","restart","baseType","partials","partialCount","asArray","length","dispose"],"sourceRoot":"","sources":["../../../../Tone/source/oscillator/PWMOscillator.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"module"}