{"ast":null,"code":"import { TicksClass } from \"../core/type/Ticks\";\nimport { TransportTimeClass } from \"../core/type/TransportTime\";\nimport { defaultArg, optionsFromArguments } from \"../core/util/Defaults\";\nimport { StateTimeline } from \"../core/util/StateTimeline\";\nimport { isArray, isDefined, isObject, isUndef } from \"../core/util/TypeCheck\";\nimport { ToneEvent } from \"./ToneEvent\";\n/**\n * Part is a collection ToneEvents which can be started/stopped and looped as a single unit.\n *\n * @example\n * const synth = new Tone.Synth().toDestination();\n * const part = new Tone.Part(((time, note) => {\n * \t// the notes given as the second element in the array\n * \t// will be passed in as the second argument\n * \tsynth.triggerAttackRelease(note, \"8n\", time);\n * }), [[0, \"C2\"], [\"0:2\", \"C3\"], [\"0:3:2\", \"G2\"]]);\n * Tone.Transport.start();\n * @example\n * const synth = new Tone.Synth().toDestination();\n * // use an array of objects as long as the object has a \"time\" attribute\n * const part = new Tone.Part(((time, value) => {\n * \t// the value is an object which contains both the note and the velocity\n * \tsynth.triggerAttackRelease(value.note, \"8n\", time, value.velocity);\n * }), [{ time: 0, note: \"C3\", velocity: 0.9 },\n * \t{ time: \"0:2\", note: \"C4\", velocity: 0.5 }\n * ]).start(0);\n * Tone.Transport.start();\n * @category Event\n */\n\nexport class Part extends ToneEvent {\n  constructor() {\n    super(optionsFromArguments(Part.getDefaults(), arguments, [\"callback\", \"events\"]));\n    this.name = \"Part\";\n    /**\n     * Tracks the scheduled events\n     */\n\n    this._state = new StateTimeline(\"stopped\");\n    /**\n     * The events that belong to this part\n     */\n\n    this._events = new Set();\n    const options = optionsFromArguments(Part.getDefaults(), arguments, [\"callback\", \"events\"]); // make sure things are assigned in the right order\n\n    this._state.increasing = true; // add the events\n\n    options.events.forEach(event => {\n      if (isArray(event)) {\n        this.add(event[0], event[1]);\n      } else {\n        this.add(event);\n      }\n    });\n  }\n\n  static getDefaults() {\n    return Object.assign(ToneEvent.getDefaults(), {\n      events: []\n    });\n  }\n  /**\n   * Start the part at the given time.\n   * @param  time    When to start the part.\n   * @param  offset  The offset from the start of the part to begin playing at.\n   */\n\n\n  start(time, offset) {\n    const ticks = this.toTicks(time);\n\n    if (this._state.getValueAtTime(ticks) !== \"started\") {\n      offset = defaultArg(offset, this._loop ? this._loopStart : 0);\n\n      if (this._loop) {\n        offset = defaultArg(offset, this._loopStart);\n      } else {\n        offset = defaultArg(offset, 0);\n      }\n\n      const computedOffset = this.toTicks(offset);\n\n      this._state.add({\n        id: -1,\n        offset: computedOffset,\n        state: \"started\",\n        time: ticks\n      });\n\n      this._forEach(event => {\n        this._startNote(event, ticks, computedOffset);\n      });\n    }\n\n    return this;\n  }\n  /**\n   * Start the event in the given event at the correct time given\n   * the ticks and offset and looping.\n   * @param  event\n   * @param  ticks\n   * @param  offset\n   */\n\n\n  _startNote(event, ticks, offset) {\n    ticks -= offset;\n\n    if (this._loop) {\n      if (event.startOffset >= this._loopStart && event.startOffset < this._loopEnd) {\n        if (event.startOffset < offset) {\n          // start it on the next loop\n          ticks += this._getLoopDuration();\n        }\n\n        event.start(new TicksClass(this.context, ticks));\n      } else if (event.startOffset < this._loopStart && event.startOffset >= offset) {\n        event.loop = false;\n        event.start(new TicksClass(this.context, ticks));\n      }\n    } else if (event.startOffset >= offset) {\n      event.start(new TicksClass(this.context, ticks));\n    }\n  }\n\n  get startOffset() {\n    return this._startOffset;\n  }\n\n  set startOffset(offset) {\n    this._startOffset = offset;\n\n    this._forEach(event => {\n      event.startOffset += this._startOffset;\n    });\n  }\n  /**\n   * Stop the part at the given time.\n   * @param  time  When to stop the part.\n   */\n\n\n  stop(time) {\n    const ticks = this.toTicks(time);\n\n    this._state.cancel(ticks);\n\n    this._state.setStateAtTime(\"stopped\", ticks);\n\n    this._forEach(event => {\n      event.stop(time);\n    });\n\n    return this;\n  }\n  /**\n   * Get/Set an Event's value at the given time.\n   * If a value is passed in and no event exists at\n   * the given time, one will be created with that value.\n   * If two events are at the same time, the first one will\n   * be returned.\n   * @example\n   * const part = new Tone.Part();\n   * part.at(\"1m\"); // returns the part at the first measure\n   * part.at(\"2m\", \"C2\"); // set the value at \"2m\" to C2.\n   * // if an event didn't exist at that time, it will be created.\n   * @param time The time of the event to get or set.\n   * @param value If a value is passed in, the value of the event at the given time will be set to it.\n   */\n\n\n  at(time, value) {\n    const timeInTicks = new TransportTimeClass(this.context, time).toTicks();\n    const tickTime = new TicksClass(this.context, 1).toSeconds();\n\n    const iterator = this._events.values();\n\n    let result = iterator.next();\n\n    while (!result.done) {\n      const event = result.value;\n\n      if (Math.abs(timeInTicks - event.startOffset) < tickTime) {\n        if (isDefined(value)) {\n          event.value = value;\n        }\n\n        return event;\n      }\n\n      result = iterator.next();\n    } // if there was no event at that time, create one\n\n\n    if (isDefined(value)) {\n      this.add(time, value); // return the new event\n\n      return this.at(time);\n    } else {\n      return null;\n    }\n  }\n\n  add(time, value) {\n    // extract the parameters\n    if (time instanceof Object && Reflect.has(time, \"time\")) {\n      value = time;\n      time = value.time;\n    }\n\n    const ticks = this.toTicks(time);\n    let event;\n\n    if (value instanceof ToneEvent) {\n      event = value;\n      event.callback = this._tick.bind(this);\n    } else {\n      event = new ToneEvent({\n        callback: this._tick.bind(this),\n        context: this.context,\n        value\n      });\n    } // the start offset\n\n\n    event.startOffset = ticks; // initialize the values\n\n    event.set({\n      humanize: this.humanize,\n      loop: this.loop,\n      loopEnd: this.loopEnd,\n      loopStart: this.loopStart,\n      playbackRate: this.playbackRate,\n      probability: this.probability\n    });\n\n    this._events.add(event); // start the note if it should be played right now\n\n\n    this._restartEvent(event);\n\n    return this;\n  }\n  /**\n   * Restart the given event\n   */\n\n\n  _restartEvent(event) {\n    this._state.forEach(stateEvent => {\n      if (stateEvent.state === \"started\") {\n        this._startNote(event, stateEvent.time, stateEvent.offset);\n      } else {\n        // stop the note\n        event.stop(new TicksClass(this.context, stateEvent.time));\n      }\n    });\n  }\n\n  remove(time, value) {\n    // extract the parameters\n    if (isObject(time) && time.hasOwnProperty(\"time\")) {\n      value = time;\n      time = value.time;\n    }\n\n    time = this.toTicks(time);\n\n    this._events.forEach(event => {\n      if (event.startOffset === time) {\n        if (isUndef(value) || isDefined(value) && event.value === value) {\n          this._events.delete(event);\n\n          event.dispose();\n        }\n      }\n    });\n\n    return this;\n  }\n  /**\n   * Remove all of the notes from the group.\n   */\n\n\n  clear() {\n    this._forEach(event => event.dispose());\n\n    this._events.clear();\n\n    return this;\n  }\n  /**\n   * Cancel scheduled state change events: i.e. \"start\" and \"stop\".\n   * @param after The time after which to cancel the scheduled events.\n   */\n\n\n  cancel(after) {\n    this._forEach(event => event.cancel(after));\n\n    this._state.cancel(this.toTicks(after));\n\n    return this;\n  }\n  /**\n   * Iterate over all of the events\n   */\n\n\n  _forEach(callback) {\n    if (this._events) {\n      this._events.forEach(event => {\n        if (event instanceof Part) {\n          event._forEach(callback);\n        } else {\n          callback(event);\n        }\n      });\n    }\n\n    return this;\n  }\n  /**\n   * Set the attribute of all of the events\n   * @param  attr  the attribute to set\n   * @param  value      The value to set it to\n   */\n\n\n  _setAll(attr, value) {\n    this._forEach(event => {\n      event[attr] = value;\n    });\n  }\n  /**\n   * Internal tick method\n   * @param  time  The time of the event in seconds\n   */\n\n\n  _tick(time, value) {\n    if (!this.mute) {\n      this.callback(time, value);\n    }\n  }\n  /**\n   * Determine if the event should be currently looping\n   * given the loop boundries of this Part.\n   * @param  event  The event to test\n   */\n\n\n  _testLoopBoundries(event) {\n    if (this._loop && (event.startOffset < this._loopStart || event.startOffset >= this._loopEnd)) {\n      event.cancel(0);\n    } else if (event.state === \"stopped\") {\n      // reschedule it if it's stopped\n      this._restartEvent(event);\n    }\n  }\n\n  get probability() {\n    return this._probability;\n  }\n\n  set probability(prob) {\n    this._probability = prob;\n\n    this._setAll(\"probability\", prob);\n  }\n\n  get humanize() {\n    return this._humanize;\n  }\n\n  set humanize(variation) {\n    this._humanize = variation;\n\n    this._setAll(\"humanize\", variation);\n  }\n  /**\n   * If the part should loop or not\n   * between Part.loopStart and\n   * Part.loopEnd. If set to true,\n   * the part will loop indefinitely,\n   * if set to a number greater than 1\n   * it will play a specific number of\n   * times, if set to false, 0 or 1, the\n   * part will only play once.\n   * @example\n   * const part = new Tone.Part();\n   * // loop the part 8 times\n   * part.loop = 8;\n   */\n\n\n  get loop() {\n    return this._loop;\n  }\n\n  set loop(loop) {\n    this._loop = loop;\n\n    this._forEach(event => {\n      event.loopStart = this.loopStart;\n      event.loopEnd = this.loopEnd;\n      event.loop = loop;\n\n      this._testLoopBoundries(event);\n    });\n  }\n  /**\n   * The loopEnd point determines when it will\n   * loop if Part.loop is true.\n   */\n\n\n  get loopEnd() {\n    return new TicksClass(this.context, this._loopEnd).toSeconds();\n  }\n\n  set loopEnd(loopEnd) {\n    this._loopEnd = this.toTicks(loopEnd);\n\n    if (this._loop) {\n      this._forEach(event => {\n        event.loopEnd = loopEnd;\n\n        this._testLoopBoundries(event);\n      });\n    }\n  }\n  /**\n   * The loopStart point determines when it will\n   * loop if Part.loop is true.\n   */\n\n\n  get loopStart() {\n    return new TicksClass(this.context, this._loopStart).toSeconds();\n  }\n\n  set loopStart(loopStart) {\n    this._loopStart = this.toTicks(loopStart);\n\n    if (this._loop) {\n      this._forEach(event => {\n        event.loopStart = this.loopStart;\n\n        this._testLoopBoundries(event);\n      });\n    }\n  }\n  /**\n   * The playback rate of the part\n   */\n\n\n  get playbackRate() {\n    return this._playbackRate;\n  }\n\n  set playbackRate(rate) {\n    this._playbackRate = rate;\n\n    this._setAll(\"playbackRate\", rate);\n  }\n  /**\n   * The number of scheduled notes in the part.\n   */\n\n\n  get length() {\n    return this._events.size;\n  }\n\n  dispose() {\n    super.dispose();\n    this.clear();\n    return this;\n  }\n\n}","map":{"version":3,"mappings":"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","names":["TicksClass","TransportTimeClass","defaultArg","optionsFromArguments","StateTimeline","isArray","isDefined","isObject","isUndef","ToneEvent","Part","constructor","getDefaults","arguments","Set","options","_state","increasing","events","forEach","event","add","Object","assign","start","time","offset","ticks","toTicks","getValueAtTime","_loop","_loopStart","computedOffset","id","state","_forEach","_startNote","startOffset","_loopEnd","_getLoopDuration","context","loop","_startOffset","stop","cancel","setStateAtTime","at","value","timeInTicks","tickTime","toSeconds","iterator","_events","values","result","next","done","Math","abs","Reflect","has","callback","_tick","bind","set","humanize","loopEnd","loopStart","playbackRate","probability","_restartEvent","stateEvent","remove","hasOwnProperty","delete","dispose","clear","after","_setAll","attr","mute","_testLoopBoundries","_probability","prob","_humanize","variation","_playbackRate","rate","length","size"],"sourceRoot":"","sources":["../../../Tone/event/Part.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"module"}