{"ast":null,"code":"import { ToneAudioBuffer } from \"../core/context/ToneAudioBuffer\";\nimport { optionsFromArguments } from \"../core/util/Defaults\";\nimport { assert } from \"../core/util/Debug\";\nimport { Source } from \"../source/Source\";\nimport { ToneBufferSource } from \"./buffer/ToneBufferSource\";\n/**\n * Noise is a noise generator. It uses looped noise buffers to save on performance.\n * Noise supports the noise types: \"pink\", \"white\", and \"brown\". Read more about\n * colors of noise on [Wikipedia](https://en.wikipedia.org/wiki/Colors_of_noise).\n *\n * @example\n * // initialize the noise and start\n * const noise = new Tone.Noise(\"pink\").start();\n * // make an autofilter to shape the noise\n * const autoFilter = new Tone.AutoFilter({\n * \tfrequency: \"8n\",\n * \tbaseFrequency: 200,\n * \toctaves: 8\n * }).toDestination().start();\n * // connect the noise\n * noise.connect(autoFilter);\n * // start the autofilter LFO\n * autoFilter.start();\n * @category Source\n */\n\nexport class Noise extends Source {\n  constructor() {\n    super(optionsFromArguments(Noise.getDefaults(), arguments, [\"type\"]));\n    this.name = \"Noise\";\n    /**\n     * Private reference to the source\n     */\n\n    this._source = null;\n    const options = optionsFromArguments(Noise.getDefaults(), arguments, [\"type\"]);\n    this._playbackRate = options.playbackRate;\n    this.type = options.type;\n    this._fadeIn = options.fadeIn;\n    this._fadeOut = options.fadeOut;\n  }\n\n  static getDefaults() {\n    return Object.assign(Source.getDefaults(), {\n      fadeIn: 0,\n      fadeOut: 0,\n      playbackRate: 1,\n      type: \"white\"\n    });\n  }\n  /**\n   * The type of the noise. Can be \"white\", \"brown\", or \"pink\".\n   * @example\n   * const noise = new Tone.Noise().toDestination().start();\n   * noise.type = \"brown\";\n   */\n\n\n  get type() {\n    return this._type;\n  }\n\n  set type(type) {\n    assert(type in _noiseBuffers, \"Noise: invalid type: \" + type);\n\n    if (this._type !== type) {\n      this._type = type; // if it's playing, stop and restart it\n\n      if (this.state === \"started\") {\n        const now = this.now();\n\n        this._stop(now);\n\n        this._start(now);\n      }\n    }\n  }\n  /**\n   * The playback rate of the noise. Affects\n   * the \"frequency\" of the noise.\n   */\n\n\n  get playbackRate() {\n    return this._playbackRate;\n  }\n\n  set playbackRate(rate) {\n    this._playbackRate = rate;\n\n    if (this._source) {\n      this._source.playbackRate.value = rate;\n    }\n  }\n  /**\n   * internal start method\n   */\n\n\n  _start(time) {\n    const buffer = _noiseBuffers[this._type];\n    this._source = new ToneBufferSource({\n      url: buffer,\n      context: this.context,\n      fadeIn: this._fadeIn,\n      fadeOut: this._fadeOut,\n      loop: true,\n      onended: () => this.onstop(this),\n      playbackRate: this._playbackRate\n    }).connect(this.output);\n\n    this._source.start(this.toSeconds(time), Math.random() * (buffer.duration - 0.001));\n  }\n  /**\n   * internal stop method\n   */\n\n\n  _stop(time) {\n    if (this._source) {\n      this._source.stop(this.toSeconds(time));\n\n      this._source = null;\n    }\n  }\n  /**\n   * The fadeIn time of the amplitude envelope.\n   */\n\n\n  get fadeIn() {\n    return this._fadeIn;\n  }\n\n  set fadeIn(time) {\n    this._fadeIn = time;\n\n    if (this._source) {\n      this._source.fadeIn = this._fadeIn;\n    }\n  }\n  /**\n   * The fadeOut time of the amplitude envelope.\n   */\n\n\n  get fadeOut() {\n    return this._fadeOut;\n  }\n\n  set fadeOut(time) {\n    this._fadeOut = time;\n\n    if (this._source) {\n      this._source.fadeOut = this._fadeOut;\n    }\n  }\n\n  _restart(time) {\n    // TODO could be optimized by cancelling the buffer source 'stop'\n    this._stop(time);\n\n    this._start(time);\n  }\n  /**\n   * Clean up.\n   */\n\n\n  dispose() {\n    super.dispose();\n\n    if (this._source) {\n      this._source.disconnect();\n    }\n\n    return this;\n  }\n\n} //--------------------\n// THE NOISE BUFFERS\n//--------------------\n// Noise buffer stats\n\nconst BUFFER_LENGTH = 44100 * 5;\nconst NUM_CHANNELS = 2;\n/**\n * Cache the noise buffers\n */\n\nconst _noiseCache = {\n  brown: null,\n  pink: null,\n  white: null\n};\n/**\n * The noise arrays. Generated on initialization.\n * borrowed heavily from https://github.com/zacharydenton/noise.js\n * (c) 2013 Zach Denton (MIT)\n */\n\nconst _noiseBuffers = {\n  get brown() {\n    if (!_noiseCache.brown) {\n      const buffer = [];\n\n      for (let channelNum = 0; channelNum < NUM_CHANNELS; channelNum++) {\n        const channel = new Float32Array(BUFFER_LENGTH);\n        buffer[channelNum] = channel;\n        let lastOut = 0.0;\n\n        for (let i = 0; i < BUFFER_LENGTH; i++) {\n          const white = Math.random() * 2 - 1;\n          channel[i] = (lastOut + 0.02 * white) / 1.02;\n          lastOut = channel[i];\n          channel[i] *= 3.5; // (roughly) compensate for gain\n        }\n      }\n\n      _noiseCache.brown = new ToneAudioBuffer().fromArray(buffer);\n    }\n\n    return _noiseCache.brown;\n  },\n\n  get pink() {\n    if (!_noiseCache.pink) {\n      const buffer = [];\n\n      for (let channelNum = 0; channelNum < NUM_CHANNELS; channelNum++) {\n        const channel = new Float32Array(BUFFER_LENGTH);\n        buffer[channelNum] = channel;\n        let b0, b1, b2, b3, b4, b5, b6;\n        b0 = b1 = b2 = b3 = b4 = b5 = b6 = 0.0;\n\n        for (let i = 0; i < BUFFER_LENGTH; i++) {\n          const white = Math.random() * 2 - 1;\n          b0 = 0.99886 * b0 + white * 0.0555179;\n          b1 = 0.99332 * b1 + white * 0.0750759;\n          b2 = 0.96900 * b2 + white * 0.1538520;\n          b3 = 0.86650 * b3 + white * 0.3104856;\n          b4 = 0.55000 * b4 + white * 0.5329522;\n          b5 = -0.7616 * b5 - white * 0.0168980;\n          channel[i] = b0 + b1 + b2 + b3 + b4 + b5 + b6 + white * 0.5362;\n          channel[i] *= 0.11; // (roughly) compensate for gain\n\n          b6 = white * 0.115926;\n        }\n      }\n\n      _noiseCache.pink = new ToneAudioBuffer().fromArray(buffer);\n    }\n\n    return _noiseCache.pink;\n  },\n\n  get white() {\n    if (!_noiseCache.white) {\n      const buffer = [];\n\n      for (let channelNum = 0; channelNum < NUM_CHANNELS; channelNum++) {\n        const channel = new Float32Array(BUFFER_LENGTH);\n        buffer[channelNum] = channel;\n\n        for (let i = 0; i < BUFFER_LENGTH; i++) {\n          channel[i] = Math.random() * 2 - 1;\n        }\n      }\n\n      _noiseCache.white = new ToneAudioBuffer().fromArray(buffer);\n    }\n\n    return _noiseCache.white;\n  }\n\n};","map":{"version":3,"mappings":"AAAA,SAASA,eAAT,QAAgC,iCAAhC;AAEA,SAASC,oBAAT,QAAqC,uBAArC;AACA,SAASC,MAAT,QAAuB,oBAAvB;AACA,SAASC,MAAT,QAAsC,kBAAtC;AACA,SAASC,gBAAT,QAAiC,2BAAjC;AAWA;;;;;;;;;;;;;;;;;;;;;AAoBA,OAAM,MAAOC,KAAP,SAAqBF,MAArB,CAAyC;EAmC9CG;IACC,MAAML,oBAAoB,CAACI,KAAK,CAACE,WAAN,EAAD,EAAsBC,SAAtB,EAAiC,CAAC,MAAD,CAAjC,CAA1B;IAlCQ,YAAe,OAAf;IAET;;;;IAGQ,eAAmC,IAAnC;IA8BP,MAAMC,OAAO,GAAGR,oBAAoB,CAACI,KAAK,CAACE,WAAN,EAAD,EAAsBC,SAAtB,EAAiC,CAAC,MAAD,CAAjC,CAApC;IAEA,KAAKE,aAAL,GAAqBD,OAAO,CAACE,YAA7B;IACA,KAAKC,IAAL,GAAYH,OAAO,CAACG,IAApB;IACA,KAAKC,OAAL,GAAeJ,OAAO,CAACK,MAAvB;IACA,KAAKC,QAAL,GAAgBN,OAAO,CAACO,OAAxB;EACA;;EAEiB,OAAXT,WAAW;IACjB,OAAOU,MAAM,CAACC,MAAP,CAAcf,MAAM,CAACI,WAAP,EAAd,EAAoC;MAC1CO,MAAM,EAAE,CADkC;MAE1CE,OAAO,EAAE,CAFiC;MAG1CL,YAAY,EAAE,CAH4B;MAI1CC,IAAI,EAAE;IAJoC,CAApC,CAAP;EAMA;EAED;;;;;;;;EAMQ,IAAJA,IAAI;IACP,OAAO,KAAKO,KAAZ;EACA;;EACO,IAAJP,IAAI,CAACA,IAAD,EAAgB;IACvBV,MAAM,CAACU,IAAI,IAAIQ,aAAT,EAAwB,0BAA0BR,IAAlD,CAAN;;IACA,IAAI,KAAKO,KAAL,KAAeP,IAAnB,EAAyB;MACxB,KAAKO,KAAL,GAAaP,IAAb,CADwB,CAExB;;MACA,IAAI,KAAKS,KAAL,KAAe,SAAnB,EAA8B;QAC7B,MAAMC,GAAG,GAAG,KAAKA,GAAL,EAAZ;;QACA,KAAKC,KAAL,CAAWD,GAAX;;QACA,KAAKE,MAAL,CAAYF,GAAZ;MACA;IACD;EACD;EAED;;;;;;EAIgB,IAAZX,YAAY;IACf,OAAO,KAAKD,aAAZ;EACA;;EACe,IAAZC,YAAY,CAACc,IAAD,EAAe;IAC9B,KAAKf,aAAL,GAAqBe,IAArB;;IACA,IAAI,KAAKC,OAAT,EAAkB;MACjB,KAAKA,OAAL,CAAaf,YAAb,CAA0BgB,KAA1B,GAAkCF,IAAlC;IACA;EACD;EAED;;;;;EAGUD,MAAM,CAACI,IAAD,EAAY;IAC3B,MAAMC,MAAM,GAAGT,aAAa,CAAC,KAAKD,KAAN,CAA5B;IACA,KAAKO,OAAL,GAAe,IAAItB,gBAAJ,CAAqB;MACnC0B,GAAG,EAAED,MAD8B;MAEnCE,OAAO,EAAE,KAAKA,OAFqB;MAGnCjB,MAAM,EAAE,KAAKD,OAHsB;MAInCG,OAAO,EAAE,KAAKD,QAJqB;MAKnCiB,IAAI,EAAE,IAL6B;MAMnCC,OAAO,EAAE,MAAM,KAAKC,MAAL,CAAY,IAAZ,CANoB;MAOnCvB,YAAY,EAAE,KAAKD;IAPgB,CAArB,EAQZyB,OARY,CAQJ,KAAKC,MARD,CAAf;;IASA,KAAKV,OAAL,CAAaW,KAAb,CAAmB,KAAKC,SAAL,CAAeV,IAAf,CAAnB,EAAyCW,IAAI,CAACC,MAAL,MAAiBX,MAAM,CAACY,QAAP,GAAkB,KAAnC,CAAzC;EACA;EAED;;;;;EAGUlB,KAAK,CAACK,IAAD,EAAY;IAC1B,IAAI,KAAKF,OAAT,EAAkB;MACjB,KAAKA,OAAL,CAAagB,IAAb,CAAkB,KAAKJ,SAAL,CAAeV,IAAf,CAAlB;;MACA,KAAKF,OAAL,GAAe,IAAf;IACA;EACD;EAED;;;;;EAGU,IAANZ,MAAM;IACT,OAAO,KAAKD,OAAZ;EACA;;EACS,IAANC,MAAM,CAACc,IAAD,EAAK;IACd,KAAKf,OAAL,GAAee,IAAf;;IACA,IAAI,KAAKF,OAAT,EAAkB;MACjB,KAAKA,OAAL,CAAaZ,MAAb,GAAsB,KAAKD,OAA3B;IACA;EACD;EAED;;;;;EAGW,IAAPG,OAAO;IACV,OAAO,KAAKD,QAAZ;EACA;;EACU,IAAPC,OAAO,CAACY,IAAD,EAAK;IACf,KAAKb,QAAL,GAAgBa,IAAhB;;IACA,IAAI,KAAKF,OAAT,EAAkB;MACjB,KAAKA,OAAL,CAAaV,OAAb,GAAuB,KAAKD,QAA5B;IACA;EACD;;EAES4B,QAAQ,CAACf,IAAD,EAAY;IAC7B;IACA,KAAKL,KAAL,CAAWK,IAAX;;IACA,KAAKJ,MAAL,CAAYI,IAAZ;EACA;EAED;;;;;EAGAgB,OAAO;IACN,MAAMA,OAAN;;IACA,IAAI,KAAKlB,OAAT,EAAkB;MACjB,KAAKA,OAAL,CAAamB,UAAb;IACA;;IACD,OAAO,IAAP;EACA;;AA9J6C,C,CAiK/C;AACA;AACA;AAEA;;AACA,MAAMC,aAAa,GAAG,QAAQ,CAA9B;AACA,MAAMC,YAAY,GAAG,CAArB;AASA;;;;AAGA,MAAMC,WAAW,GAAe;EAC/BC,KAAK,EAAE,IADwB;EAE/BC,IAAI,EAAE,IAFyB;EAG/BC,KAAK,EAAE;AAHwB,CAAhC;AAMA;;;;;;AAKA,MAAM/B,aAAa,GAAG;EACrB,IAAI6B,KAAJ,GAAS;IACR,IAAI,CAACD,WAAW,CAACC,KAAjB,EAAwB;MACvB,MAAMpB,MAAM,GAAmB,EAA/B;;MACA,KAAK,IAAIuB,UAAU,GAAG,CAAtB,EAAyBA,UAAU,GAAGL,YAAtC,EAAoDK,UAAU,EAA9D,EAAkE;QACjE,MAAMC,OAAO,GAAG,IAAIC,YAAJ,CAAiBR,aAAjB,CAAhB;QACAjB,MAAM,CAACuB,UAAD,CAAN,GAAqBC,OAArB;QACA,IAAIE,OAAO,GAAG,GAAd;;QACA,KAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGV,aAApB,EAAmCU,CAAC,EAApC,EAAwC;UACvC,MAAML,KAAK,GAAGZ,IAAI,CAACC,MAAL,KAAgB,CAAhB,GAAoB,CAAlC;UACAa,OAAO,CAACG,CAAD,CAAP,GAAa,CAACD,OAAO,GAAI,OAAOJ,KAAnB,IAA6B,IAA1C;UACAI,OAAO,GAAGF,OAAO,CAACG,CAAD,CAAjB;UACAH,OAAO,CAACG,CAAD,CAAP,IAAc,GAAd,CAJuC,CAIpB;QACnB;MACD;;MACDR,WAAW,CAACC,KAAZ,GAAoB,IAAIjD,eAAJ,GAAsByD,SAAtB,CAAgC5B,MAAhC,CAApB;IACA;;IACD,OAAOmB,WAAW,CAACC,KAAnB;EACA,CAlBoB;;EAoBrB,IAAIC,IAAJ,GAAQ;IACP,IAAI,CAACF,WAAW,CAACE,IAAjB,EAAuB;MACtB,MAAMrB,MAAM,GAAmB,EAA/B;;MACA,KAAK,IAAIuB,UAAU,GAAG,CAAtB,EAAyBA,UAAU,GAAGL,YAAtC,EAAoDK,UAAU,EAA9D,EAAkE;QACjE,MAAMC,OAAO,GAAG,IAAIC,YAAJ,CAAiBR,aAAjB,CAAhB;QACAjB,MAAM,CAACuB,UAAD,CAAN,GAAqBC,OAArB;QACA,IAAIK,EAAJ,EAAQC,EAAR,EAAYC,EAAZ,EAAgBC,EAAhB,EAAoBC,EAApB,EAAwBC,EAAxB,EAA4BC,EAA5B;QACAN,EAAE,GAAGC,EAAE,GAAGC,EAAE,GAAGC,EAAE,GAAGC,EAAE,GAAGC,EAAE,GAAGC,EAAE,GAAG,GAAnC;;QACA,KAAK,IAAIR,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGV,aAApB,EAAmCU,CAAC,EAApC,EAAwC;UACvC,MAAML,KAAK,GAAGZ,IAAI,CAACC,MAAL,KAAgB,CAAhB,GAAoB,CAAlC;UACAkB,EAAE,GAAG,UAAUA,EAAV,GAAeP,KAAK,GAAG,SAA5B;UACAQ,EAAE,GAAG,UAAUA,EAAV,GAAeR,KAAK,GAAG,SAA5B;UACAS,EAAE,GAAG,UAAUA,EAAV,GAAeT,KAAK,GAAG,SAA5B;UACAU,EAAE,GAAG,UAAUA,EAAV,GAAeV,KAAK,GAAG,SAA5B;UACAW,EAAE,GAAG,UAAUA,EAAV,GAAeX,KAAK,GAAG,SAA5B;UACAY,EAAE,GAAG,CAAC,MAAD,GAAUA,EAAV,GAAeZ,KAAK,GAAG,SAA5B;UACAE,OAAO,CAACG,CAAD,CAAP,GAAaE,EAAE,GAAGC,EAAL,GAAUC,EAAV,GAAeC,EAAf,GAAoBC,EAApB,GAAyBC,EAAzB,GAA8BC,EAA9B,GAAmCb,KAAK,GAAG,MAAxD;UACAE,OAAO,CAACG,CAAD,CAAP,IAAc,IAAd,CATuC,CASnB;;UACpBQ,EAAE,GAAGb,KAAK,GAAG,QAAb;QACA;MACD;;MACDH,WAAW,CAACE,IAAZ,GAAmB,IAAIlD,eAAJ,GAAsByD,SAAtB,CAAgC5B,MAAhC,CAAnB;IACA;;IACD,OAAOmB,WAAW,CAACE,IAAnB;EACA,CA5CoB;;EA8CrB,IAAIC,KAAJ,GAAS;IACR,IAAI,CAACH,WAAW,CAACG,KAAjB,EAAwB;MACvB,MAAMtB,MAAM,GAAmB,EAA/B;;MACA,KAAK,IAAIuB,UAAU,GAAG,CAAtB,EAAyBA,UAAU,GAAGL,YAAtC,EAAoDK,UAAU,EAA9D,EAAkE;QACjE,MAAMC,OAAO,GAAG,IAAIC,YAAJ,CAAiBR,aAAjB,CAAhB;QACAjB,MAAM,CAACuB,UAAD,CAAN,GAAqBC,OAArB;;QACA,KAAK,IAAIG,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGV,aAApB,EAAmCU,CAAC,EAApC,EAAwC;UACvCH,OAAO,CAACG,CAAD,CAAP,GAAajB,IAAI,CAACC,MAAL,KAAgB,CAAhB,GAAoB,CAAjC;QACA;MACD;;MACDQ,WAAW,CAACG,KAAZ,GAAoB,IAAInD,eAAJ,GAAsByD,SAAtB,CAAgC5B,MAAhC,CAApB;IACA;;IACD,OAAOmB,WAAW,CAACG,KAAnB;EACA;;AA3DoB,CAAtB","names":["ToneAudioBuffer","optionsFromArguments","assert","Source","ToneBufferSource","Noise","constructor","getDefaults","arguments","options","_playbackRate","playbackRate","type","_fadeIn","fadeIn","_fadeOut","fadeOut","Object","assign","_type","_noiseBuffers","state","now","_stop","_start","rate","_source","value","time","buffer","url","context","loop","onended","onstop","connect","output","start","toSeconds","Math","random","duration","stop","_restart","dispose","disconnect","BUFFER_LENGTH","NUM_CHANNELS","_noiseCache","brown","pink","white","channelNum","channel","Float32Array","lastOut","i","fromArray","b0","b1","b2","b3","b4","b5","b6"],"sourceRoot":"","sources":["../../../Tone/source/Noise.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"module"}